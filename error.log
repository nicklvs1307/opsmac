Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Error
    at Query.run (/app/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)
    at /app/node_modules/sequelize/lib/sequelize.js:315:28
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async PostgresQueryInterface.rawSelect (/app/node_modules/sequelize/lib/dialects/abstract/query-interface.js:434:18)
    at async SurveyResponse.aggregate (/app/node_modules/sequelize/lib/model.js:1277:19)
    at async SurveyResponse.count (/app/node_modules/sequelize/lib/model.js:1306:20)
    at async Promise.all (index 2)
    at async Object.getDashboardAnalytics (/app/src/domains/dashboard/dashboard.service.js:154:13)
    at async getDashboardAnalytics (/app/src/domains/dashboard/dashboard.controller.js:25:26)
Decoded userId: 29b580e3-2dcd-4da8-b7f0-650815cc304d
Error
    at Query.run (/app/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)
    at /app/node_modules/sequelize/lib/sequelize.js:315:28
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async PostgresQueryInterface.rawSelect (/app/node_modules/sequelize/lib/dialects/abstract/query-interface.js:434:18)
    at async SurveyResponse.aggregate (/app/node_modules/sequelize/lib/model.js:1277:19)
    at async SurveyResponse.count (/app/node_modules/sequelize/lib/model.js:1306:20)
    at async Promise.all (index 2)
    at async Object.getDashboardAnalytics (/app/src/domains/dashboard/dashboard.service.js:154:13)
    at async getDashboardAnalytics (/app/src/domains/dashboard/dashboard.controller.js:25:26)
Dito pelo ChatGPT:

Mestre, pelo que voc√™ me mostrou, tem duas coisas rolando a√≠:

Log repetitivo do Decoded userId
Isso parece vir de algum trecho do seu c√≥digo onde voc√™ faz console.log("Decoded userId:", userId).
Como a mesma requisi√ß√£o roda v√°rias vezes (talvez em um loop, em v√°rias promessas paralelas ou em middleware duplicado), o log aparece repetido dezenas de vezes.
üëâ Vale a pena revisar onde voc√™ est√° decodificando esse userId (middleware de auth? fun√ß√£o de JWT?) e garantir que s√≥ rode uma vez por request.

Erro do Sequelize/Postgres (SurveyResponse.count)
O stacktrace mostra isso:

Error
    at Query.run (/app/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)
    ...
    at async SurveyResponse.aggregate (/app/node_modules/sequelize/lib/model.js:1277:19)
    at async SurveyResponse.count (/app/node_modules/sequelize/lib/model.js:1306:20)
    ...
    at async getDashboardAnalytics (/app/src/domains/dashboard/dashboard.controller.js:25:26)


Ou seja, o erro vem quando voc√™ tenta fazer um count no model SurveyResponse dentro do m√©todo getDashboardAnalytics.

Poss√≠veis causas:

Model n√£o existe na base ‚Üí a tabela SurveyResponses pode n√£o estar criada ou estar com nome diferente.

Erro de campo ‚Üí se no count voc√™ passa { where: { campo: valor } }, pode estar usando um campo que n√£o existe.