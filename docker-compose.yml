version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Only expose for local development, remove for production if not needed
    networks:
      - towersfy_network
    deploy:
      # For production, you might not want to deploy postgres via compose,
      # or you'd configure it differently (e.g., external managed DB)
      # This section is primarily for local docker-compose setup.
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  migrations:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: feedeliza-backend:latest
    depends_on:
      - postgres
    env_file:
      - .env # Load environment variables from .env for local dev
    environment:
      # For production, these will be read from secrets
      DB_PASSWORD_FILE: /run/secrets/db_password # For production secrets
    command: >
      /bin/sh -c "
        echo 'Waiting for database to be ready...'
        sleep 15
        echo 'Running migrations...'
        npx sequelize-cli db:migrate &&
        echo 'Running seeders...'
        npx sequelize-cli db:seed:all
      "
    networks:
      - towersfy_network
    volumes:
      - .:/app # Mount entire project for migrations
    secrets:
      - db_password # For production secrets
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: feedeliza-backend:latest
    depends_on:
      - migrations # Ensure migrations run first
    env_file:
      - .env # Load environment variables from .env for local dev
    environment:
      # For production, these will be read from secrets
      DB_PASSWORD_FILE: /run/secrets/db_password # For production secrets
      JWT_SECRET_FILE: /run/secrets/jwt_secret # For production secrets
    ports:
      - "5000:5000" # Only expose for local development, remove for production if behind Traefik
    networks:
      - towersfy_network
    volumes:
      - uploads_data:/app/backend/public/uploads
      # For local development, you might want to mount the backend code for live reloading
      # - ./backend:/app/backend
    secrets:
      - db_password # For production secrets
      - jwt_secret # For production secrets
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`feedelizaapi.towersfy.com`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.backend.loadbalancer.server.port=5000"
        - "traefik.http.routers.backend-uploads.rule=Host(`feedelizaapi.towersfy.com`) && PathPrefix(`/uploads`)"
        - "traefik.http.routers.backend-uploads.entrypoints=websecure"
        - "traefik.http.routers.backend-uploads.tls.certresolver=letsencryptresolver"
        - "traefik.http.routers.backend-uploads.priority=100"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: feedeliza-frontend:latest
    env_file:
      - .env # Load environment variables from .env for local dev
    ports:
      - "3000:80" # Only expose for local development, remove for production if behind Traefik
    networks:
      - towersfy_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`feedelizapro.towersfy.com`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.frontend.loadbalancer.server.port=80"

networks:
  towersfy_network:
    external: true # Usando a rede existente do Traefik

volumes:
  uploads_data:
  postgres_data: # New volume for postgres data

# Declaração dos secrets que serão usados. O Docker espera que eles já existam no Swarm.
secrets:
  db_password:
    external: true
  jwt_secret:
    external: true