settings:1 Error while trying to use the following icon from the Manifest: https://feedelizapro.towersfy.com/logo192.png (Download error or resource isn't a valid image)
(function () {
  // Intercepta fetch()
  const originalFetch = window.fetch;
  window.fetch = async (...args) => {
    console.log('%c[FETCH] RequisiÃ§Ã£o:', 'color: #4caf50', ...args);

    try {
      const response = await originalFetch(...args);
      const clone = response.clone();

      clone.text().then(text => {
        console.log('%c[FETCH] Resposta:', 'color: #2196f3', {
          url: clone.url,
          status: clone.status,
          body: text
        });
      });

      return response;
    } catch (err) {
      console.error('%c[FETCH] Erro:', 'color: red', err);
      throw err;
    }
  };

  // Intercepta XMLHttpRequest (usado por axios, jQuery, etc)
  const originalOpen = XMLHttpRequest.prototype.open;
  const originalSend = XMLHttpRequest.prototype.send;

  XMLHttpRequest.prototype.open = function (method, url, ...rest) {
    this._method = method;
    this._url = url;
    return originalOpen.call(this, method, url, ...rest);
  };

  XMLHttpRequest.prototype.send = function (body) {
    const startTime = Date.now();
    const xhr = this;

    const logResponse = () => {
      const duration = Date.now() - startTime;
      console.log('%c[XHR] RequisiÃ§Ã£o:', 'color: #fbc02d', {
        method: xhr._method,
        url: xhr._url,
        body: body
      });
      console.log('%c[XHR] Resposta:', 'color: #03a9f4', {
        status: xhr.status,
        response: xhr.response,
        tempo: `${duration}ms`
      });
    };

    this.addEventListener('loadend', logResponse);
    return originalSend.call(this, body);
  };

  console.log('%c[INTERCEPTADOR ATIVADO] Todas as requisiÃ§Ãµes e respostas serÃ£o logadas no console.', 'color: #673ab7; font-weight: bold');
})();

VM246:58 [INTERCEPTADOR ATIVADO] Todas as requisiÃ§Ãµes e respostas serÃ£o logadas no console.
undefined
ProfilePictureUpload.js:17 [ProfilePictureUpload] Selected file: FileÂ {name: 'download.jpeg', lastModified: 1749061307722, lastModifiedDate: Wed Jun 04 2025 15:21:47 GMT-0300 (HorÃ¡rio PadrÃ£o de BrasÃ­lia), webkitRelativePath: '', size: 13209,Â â€¦}
VM246:55  POST https://feedelizaapi.towersfy.com/api/settings/profile/avatar 404 (Not Found)
XMLHttpRequest.send @ VM246:55
(anÃ´nimo) @ xhr.js:195
xhr @ xhr.js:15
Ln @ dispatchRequest.js:51
Promise.then
_request @ Axios.js:163
request @ Axios.js:40
(anÃ´nimo) @ Axios.js:226
(anÃ´nimo) @ bind.js:5
onClick @ ProfilePictureUpload.js:34
Ne @ react-dom.production.min.js:54
Be @ react-dom.production.min.js:54
(anÃ´nimo) @ react-dom.production.min.js:55
zn @ react-dom.production.min.js:105
$n @ react-dom.production.min.js:106
(anÃ´nimo) @ react-dom.production.min.js:117
cc @ react-dom.production.min.js:273
Me @ react-dom.production.min.js:52
qn @ react-dom.production.min.js:109
Qt @ react-dom.production.min.js:74
Ut @ react-dom.production.min.js:73
ProfilePictureUpload.js:46 [ProfilePictureUpload] Upload error: {error: 'UsuÃ¡rio nÃ£o encontrado.'}
onClick @ ProfilePictureUpload.js:46
await in onClick
Ne @ react-dom.production.min.js:54
Be @ react-dom.production.min.js:54
(anÃ´nimo) @ react-dom.production.min.js:55
zn @ react-dom.production.min.js:105
$n @ react-dom.production.min.js:106
(anÃ´nimo) @ react-dom.production.min.js:117
cc @ react-dom.production.min.js:273
Me @ react-dom.production.min.js:52
qn @ react-dom.production.min.js:109
Qt @ react-dom.production.min.js:74
Ut @ react-dom.production.min.js:73
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'POST', url: 'https://feedelizaapi.towersfy.com/api/settings/profile/avatar', body: FormData}
VM246:47 [XHR] Resposta: {status: 404, response: '{"error":"UsuÃ¡rio nÃ£o encontrado."}', tempo: '563ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'PUT', url: 'https://feedelizaapi.towersfy.com/api/auth/profile', body: '{"name":"Lucas Niquele","email":"lucas@teste.com","phone":"3597989898"}'}
VM246:47 [XHR] Resposta: {status: 200, response: '{"message":"Perfil atualizado com sucesso","user":â€¦s@teste.com","phone":"3597989898","avatar":null}}', tempo: '606ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'PUT', url: 'https://feedelizaapi.towersfy.com/api/settings/0e517dc5-4881-45aa-996e-0365012000bc/profile', body: '{"name":"Roma Pizzaria & Chopperia","cuisine_type"â€¦Pizzaria","address":"Avenida2","description":"z"}'}
VM246:47 [XHR] Resposta: {status: 200, response: '{"message":"InformaÃ§Ãµes do restaurante atualizadasâ€¦08.026Z","updatedAt":"2025-08-04T22:26:37.254Z"}}', tempo: '2368ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'GET', url: 'https://feedelizaapi.towersfy.com/api/settings/0e517dc5-4881-45aa-996e-0365012000bc/whatsapp', body: null}
VM246:47 [XHR] Resposta: {status: 200, response: '{"whatsapp_api_url":"https://evolution2.towersfy.câ€¦towersfy","whatsapp_phone_number":"553597694939"}', tempo: '2453ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'GET', url: 'https://feedelizaapi.towersfy.com/api/settings/0e517dc5-4881-45aa-996e-0365012000bc', body: null}
VM246:47 [XHR] Resposta: {status: 200, response: '{"settings":{"nps_enabled":true,"tablet_mode":falsâ€¦s/logo-1754346397233-227577498.jpeg","slug":null}', tempo: '2463ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'GET', url: 'https://feedelizaapi.towersfy.com/api/settings/0e517dc5-4881-45aa-996e-0365012000bc/api-token', body: null}
VM246:47 [XHR] Resposta: {status: 200, response: '{"api_token":"c8e6ceb0cf0f707a3a195448418ccde0"}', tempo: '2462ms'}
Settings.js:106 [Settings] Selected logo file: FileÂ {name: 'download.jpeg', lastModified: 1749061307722, lastModifiedDate: Wed Jun 04 2025 15:21:47 GMT-0300 (HorÃ¡rio PadrÃ£o de BrasÃ­lia), webkitRelativePath: '', size: 13209,Â â€¦}
Settings.js:122 [Settings] Logo upload success response: {message: 'Logo atualizado com sucesso!', logo_url: '/uploads/logo-1754348635460-670530059.jpeg'}
Settings.js:130 [Settings] Logo upload error: u is not a function
z @ Settings.js:130
await in z
Ne @ react-dom.production.min.js:54
Be @ react-dom.production.min.js:54
(anÃ´nimo) @ react-dom.production.min.js:55
zn @ react-dom.production.min.js:105
$n @ react-dom.production.min.js:106
(anÃ´nimo) @ react-dom.production.min.js:117
cc @ react-dom.production.min.js:273
Me @ react-dom.production.min.js:52
qn @ react-dom.production.min.js:109
Qt @ react-dom.production.min.js:74
Ut @ react-dom.production.min.js:73
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'POST', url: 'https://feedelizaapi.towersfy.com/api/settings/0e517dc5-4881-45aa-996e-0365012000bc/logo', body: FormData}
VM246:47 [XHR] Resposta: {status: 200, response: '{"message":"Logo atualizado com sucesso!","logo_url":"/uploads/logo-1754348635460-670530059.jpeg"}', tempo: '2202ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'PUT', url: 'https://feedelizaapi.towersfy.com/api/auth/profile', body: '{"name":"Lucas Niquele","email":"lucas@teste.com","phone":"3597989898"}'}
VM246:47 [XHR] Resposta: {status: 200, response: '{"message":"Perfil atualizado com sucesso","user":â€¦s@teste.com","phone":"3597989898","avatar":null}}', tempo: '2303ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'PUT', url: 'https://feedelizaapi.towersfy.com/api/settings/0e517dc5-4881-45aa-996e-0365012000bc/profile', body: '{"name":"Roma Pizzaria & Chopperia","cuisine_type"â€¦Pizzaria","address":"Avenida2","description":"z"}'}
VM246:47 [XHR] Resposta: {status: 200, response: '{"message":"InformaÃ§Ãµes do restaurante atualizadasâ€¦08.026Z","updatedAt":"2025-08-04T23:03:55.471Z"}}', tempo: '514ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'GET', url: 'https://feedelizaapi.towersfy.com/api/settings/0e517dc5-4881-45aa-996e-0365012000bc/api-token', body: null}
VM246:47 [XHR] Resposta: {status: 200, response: '{"api_token":"c8e6ceb0cf0f707a3a195448418ccde0"}', tempo: '617ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'GET', url: 'https://feedelizaapi.towersfy.com/api/settings/0e517dc5-4881-45aa-996e-0365012000bc/whatsapp', body: null}
VM246:47 [XHR] Resposta: {status: 200, response: '{"whatsapp_api_url":"https://evolution2.towersfy.câ€¦towersfy","whatsapp_phone_number":"553597694939"}', tempo: '745ms'}
VM246:42 [XHR] RequisiÃ§Ã£o: {method: 'GET', url: 'https://feedelizaapi.towersfy.com/api/settings/0e517dc5-4881-45aa-996e-0365012000bc', body: null}
VM246:47 [XHR] Resposta: {status: 200, response: '{"settings":{"nps_enabled":true,"tablet_mode":falsâ€¦s/logo-1754348635460-670530059.jpeg","slug":null}', tempo: '820ms'}


> Feedeliza+@1.0.0 start
> node backend/server.js
Swagger JSDoc options.apis: [ '/app/backend/routes/*.js' ]
Generated Swagger Specs (first 500 chars): {
  "openapi": "3.0.0",
  "info": {
    "title": "Check Test API",
    "version": "1.0.0",
    "description": "API documentation for the Check Test application."
  },
  "servers": [
    {
      "url": "https://feedelizaapi.towersfy.com/api",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Public API",
      "description": "Endpoints acessÃ­veis via API Token para integraÃ§Ã£o externa."
    },
    {
      "name": "Admin",
      "description": "Gerenciamento de us
âœ… ConexÃ£o com banco de dados estabelecida
âœ… Modelos sincronizados com o banco
ðŸš€ Servidor rodando na porta 5000
ðŸ“Š Dashboard: https://feedelizapro.towersfy.com
ðŸ”— API: https://feedelizaapi.towersfy.com/api
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
[Logo Upload] Restaurant ID: 0e517dc5-4881-45aa-996e-0365012000bc, Uploaded filename: logo-1754348635460-670530059.jpeg
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}
Auth Middleware - req.user (after population): {
  userId: '211aab5d-fb9a-421b-991c-fcda8bc44051',
  email: 'lucas@teste.com',
  role: 'owner',
  name: 'Lucas Niquele',
  restaurant_id: '0e517dc5-4881-45aa-996e-0365012000bc'
}