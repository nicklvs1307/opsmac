const { models, sequelize } = require('../config/database');const { sendWhatsAppMessage } = require('../utils/whatsappService');async function sendCouponReminders() {  console.log('Iniciando envio de lembretes de cupons...');  try {    // Buscar cupons que expiram em breve e ainda nÃ£o tiveram lembrete enviado    const couponsToExpire = await models.Coupon.getExpiringSoon(3); // Cupons que expiram em 3 dias    if (couponsToExpire.length === 0) {      console.log('Nenhum cupom para enviar lembrete.');      return;    }    console.log(`Encontrados ${couponsToExpire.length} cupons para lembrete.`);    for (const coupon of couponsToExpire) {      try {        const customer = coupon.customer;        const restaurant = coupon.restaurant;        if (!customer || !restaurant) {          console.warn(`Cupom ${coupon.id}: Cliente ou Restaurante nÃ£o encontrado. Pulando.`);          continue;        }        if (!customer.phone) {          console.warn(`Cupom ${coupon.id}: Cliente ${customer.id} nÃ£o possui nÃºmero de telefone. Pulando.`);          continue;        }        if (!restaurant.whatsapp_api_url || !restaurant.whatsapp_api_key || !restaurant.whatsapp_instance_id || !restaurant.whatsapp_phone_number) {          console.warn(`Cupom ${coupon.id}: Credenciais da Evolution API incompletas para o restaurante ${restaurant.id}. Pulando.`);          continue;        }        const reward = await models.Reward.findByPk(coupon.reward_id);        const rewardTitle = reward ? reward.title : 'seu benefÃ­cio';        const reminderMessage = `OlÃ¡ ${customer.name || ''}! ðŸ‘‹

Lembrete: VocÃª tem um cupom ativo de *${rewardTitle}* (${coupon.code}) no *${restaurant.name}* que expira em breve!

NÃ£o perca essa chance! Resgate seu cupom antes de ${coupon.expires_at.toLocaleDateString('pt-BR')}.

Esperamos por vocÃª! ðŸ˜‰`;        const whatsappResponse = await sendWhatsAppMessage(          restaurant.whatsapp_api_url,          restaurant.whatsapp_api_key,          restaurant.whatsapp_instance_id,          customer.phone,          reminderMessage        );        if (whatsappResponse.success) {          console.log(`Lembrete de cupom ${coupon.code} enviado com sucesso para ${customer.phone}`);          await coupon.update({            reminder_sent: true,            reminder_sent_at: new Date()          });          // Opcional: Registrar o envio da mensagem no banco de dados          await models.WhatsAppMessage.create({            phone_number: customer.phone,            message_text: reminderMessage,            message_type: 'coupon_reminder',            status: 'sent',            whatsapp_message_id: whatsappResponse.data?.id || null,            restaurant_id: restaurant.id,            customer_id: customer.id,            coupon_id: coupon.id          });        } else {          console.error(`Erro ao enviar lembrete de cupom ${coupon.code} para ${customer.phone}:`, whatsappResponse.error);        }        // Pequeno delay para evitar rate limiting        await new Promise(resolve => setTimeout(resolve, 500));      } catch (error) {        console.error(`Erro ao processar cupom ${coupon.id}:`, error);      }    }    console.log('Envio de lembretes de cupons concluÃ­do.');  } catch (error) {    console.error('Erro geral no envio de lembretes de cupons:', error);  } finally {    // Fechar a conexÃ£o com o banco de dados se este script for executado de forma independente    // await sequelize.close();  }}// Para execuÃ§Ã£o via linha de comandoif (require.main === module) {  sendCouponReminders()    .then(() => process.exit(0))    .catch((err) => {      console.error('Erro fatal no script de lembretes de cupons:', err);      process.exit(1);    });}module.exports = sendCouponReminders;