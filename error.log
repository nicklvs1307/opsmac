    beforeAssociate: [Function (anonymous)],
    afterAssociate: [Function (anonymous)],
    beforeConnect: [Function (anonymous)],
    afterConnect: [Function (anonymous)],
    beforeDisconnect: [Function (anonymous)],
    afterDisconnect: [Function (anonymous)],
    beforePoolAcquire: [Function (anonymous)],
    afterPoolAcquire: [Function (anonymous)],
    beforeSync: [Function (anonymous)],
    afterSync: [Function (anonymous)],
    beforeBulkSync: [Function (anonymous)],
    afterBulkSync: [Function (anonymous)],
    beforeQuery: [Function (anonymous)],
    afterQuery: [Function (anonymous)],
    Error: [class BaseError extends Error],
    AccessDeniedError: [class AccessDeniedError extends ConnectionError],
    AggregateError: [class AggregateError extends BaseError],
    AssociationError: [class AssociationError extends BaseError],
    AsyncQueueError: [class AsyncQueueError extends BaseError],
    BaseError: [class BaseError extends Error],
    BulkRecordError: [class BulkRecordError extends BaseError],
    ConnectionAcquireTimeoutError: [class ConnectionAcquireTimeoutError extends ConnectionError],
    ConnectionError: [class ConnectionError extends BaseError],
    ConnectionRefusedError: [class ConnectionRefusedError extends ConnectionError],
    ConnectionTimedOutError: [class ConnectionTimedOutError extends ConnectionError],
    DatabaseError: [class DatabaseError extends BaseError],
    EagerLoadingError: [class EagerLoadingError extends BaseError],
    EmptyResultError: [class EmptyResultError extends BaseError],
    ExclusionConstraintError: [class ExclusionConstraintError extends DatabaseError],
    ForeignKeyConstraintError: [class ForeignKeyConstraintError extends DatabaseError],
    HostNotFoundError: [class HostNotFoundError extends ConnectionError],
    HostNotReachableError: [class HostNotReachableError extends ConnectionError],
    InstanceError: [class InstanceError extends BaseError],
    InvalidConnectionError: [class InvalidConnectionError extends ConnectionError],
    OptimisticLockError: [class OptimisticLockError extends BaseError],
    QueryError: [class QueryError extends BaseError],
    SequelizeScopeError: [class SequelizeScopeError extends BaseError],
    TimeoutError: [class TimeoutError extends DatabaseError],
    UniqueConstraintError: [class UniqueConstraintError extends ValidationError],
    UnknownConstraintError: [class UnknownConstraintError extends DatabaseError],
    ValidationError: [class ValidationError extends BaseError],
    ValidationErrorItem: [class ValidationErrorItem] {
      TypeStringMap: [Object],
      Origins: [Object]
    },
    ValidationErrorItemOrigin: { CORE: 'CORE', DB: 'DB', FUNCTION: 'FUNCTION' },
    ValidationErrorItemType: {
      'notnull violation': 'CORE',
      'string violation': 'CORE',
      'unique violation': 'DB',
      'validation error': 'FUNCTION'
    },
    Sequelize: [Circular *8],
    default: [Circular *8]
  },
  testConnection: [AsyncFunction (anonymous)],
  syncDatabase: [AsyncFunction (anonymous)]
}
rewardsController at module.exports entry: {
  listRewards: [AsyncFunction: listRewards],
  getRewardById: [AsyncFunction: getRewardById],
  createReward: [AsyncFunction: createReward],
  updateReward: [AsyncFunction: updateReward],
  deleteReward: [AsyncFunction: deleteReward],
  spinWheel: [AsyncFunction: spinWheel],
  getRewardsAnalytics: [AsyncFunction: getRewardsAnalytics]
}
rewardsController.listRewards before router.get: [AsyncFunction: listRewards]
qrcodeController in qrcode.routes.js: {
  createQRCode: [AsyncFunction: createQRCode],
  listQRCodes: [AsyncFunction: listQRCodes],
  getQRCodeById: [AsyncFunction: getQRCodeById],
  updateQRCode: [AsyncFunction: updateQRCode],
  deleteQRCode: [AsyncFunction: deleteQRCode],
  generateQRCodeImage: [AsyncFunction: generateQRCodeImage],
  generatePrintableQRCode: [AsyncFunction: generatePrintableQRCode],
  recordScan: [AsyncFunction: recordScan],
  redirectToShortUrl: [AsyncFunction: redirectToShortUrl],
  getQRCodeAnalytics: [AsyncFunction: getQRCodeAnalytics],
  cloneQRCode: [AsyncFunction: cloneQRCode],
  getRestaurantQRCodeStats: [AsyncFunction: getRestaurantQRCodeStats]
}
qrcodeController.listQRCodes in qrcode.routes.js: [AsyncFunction: listQRCodes]
/app/node_modules/express/lib/router/route.js:216
        throw new Error(msg);

^
Error: Route.get() requires a callback function but got a [object Undefined]
    at Route.<computed> [as get] (/app/node_modules/express/lib/router/route.js:216:15)
    at proto.<computed> [as get] (/app/node_modules/express/lib/router/index.js:521:19)
    at module.exports (/app/backend/src/domains/qrcode/qrcode.routes.js:28:12)
    at module.exports (/app/backend/routes/index.js:66:78)
    at Object.<anonymous> (/app/backend/server.js:62:1)
    at Module._compile (node:internal/modules/cjs/loader:1521:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1623:10)
    at Module.load (node:internal/modules/cjs/loader:1266:32)
    at Module._load (node:internal/modules/cjs/loader:1091:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:164:12)
Node.js v20.19.5