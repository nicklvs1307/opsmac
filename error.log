> feedeliza-plus@1.0.0 start
> node server.js
✅ Conexão com banco de dados estabelecida
DB object in auth.controller.js: {
  Action: Action,
  Addon: Addon,
  Answer: Answer,
  AuditLog: AuditLog,
  CashRegisterCategory: CashRegisterCategory,
  CashRegisterMovement: CashRegisterMovement,
  CashRegisterSession: CashRegisterSession,
  Category: Category,
  Checkin: Checkin,
  Coupon: Coupon,
  Customer: Customer,
  Feature: Feature,
  Feedback: Feedback,
  FinancialCategory: FinancialCategory,
  FinancialTransaction: FinancialTransaction,
  Ingredient: Ingredient,
  LossRecord: LossRecord,
  Module: Module,
  NpsCriterion: NpsCriterion,
  Order: Order,
  PaymentMethod: PaymentMethod,
  PrintedLabel: PrintedLabel,
  Product: Product,
  ProductionRecord: ProductionRecord,
  ProductionRecordItem: ProductionRecordItem,
  QRCode: QRCode,
  Question: Question,
  RecipeIngredient: RecipeIngredient,
  Restaurant: Restaurant,
  RestaurantEntitlement: RestaurantEntitlement,
  Reward: Reward,
  Role: Role,
  RolePermission: RolePermission,
  Stock: Stock,
  StockCount: StockCount,
  StockCountItem: StockCountItem,
  StockMovement: StockMovement,
  Submodule: Submodule,
  Supplier: Supplier,
  Survey: Survey,
  SurveyResponse: SurveyResponse,
  Table: Table,
  TableSession: TableSession,
  TechnicalSpecification: TechnicalSpecification,
  User: User,
  UserPermissionOverride: UserPermissionOverride,
  UserRestaurant: UserRestaurant,
  UserRole: UserRole,
  WaiterCall: WaiterCall,
  WhatsappMessage: WhatsappMessage,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'postgres',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: false,
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.19.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      username: 'postgres',
      password: 'b74996144735db08d6e091f460df4184',
      database: 'feedeliza',
      port: '5432'
    },
    config: {
      database: 'feedeliza',
      username: 'postgres',
      password: 'b74996144735db08d6e091f460df4184',
      host: 'postgres',
      port: '5432',
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      Action: Action,
      Addon: Addon,
      Answer: Answer,
      AuditLog: AuditLog,
      CashRegisterCategory: CashRegisterCategory,
      CashRegisterMovement: CashRegisterMovement,
      CashRegisterSession: CashRegisterSession,
      Category: Category,
      Checkin: Checkin,
      Coupon: Coupon,
      Customer: Customer,
      Feature: Feature,
      Feedback: Feedback,
      FinancialCategory: FinancialCategory,
      FinancialTransaction: FinancialTransaction,
      Ingredient: Ingredient,
      LossRecord: LossRecord,
      Module: Module,
      NpsCriterion: NpsCriterion,
      Order: Order,
      PaymentMethod: PaymentMethod,
      PrintedLabel: PrintedLabel,
      Product: Product,
      ProductionRecord: ProductionRecord,
      ProductionRecordItem: ProductionRecordItem,
      QRCode: QRCode,
      Question: Question,
      RecipeIngredient: RecipeIngredient,
      Restaurant: Restaurant,
      RestaurantEntitlement: RestaurantEntitlement,
      Reward: Reward,
      Role: Role,
      RolePermission: RolePermission,
      Stock: Stock,
      StockCount: StockCount,
      StockCountItem: StockCountItem,
      StockMovement: StockMovement,
      Submodule: Submodule,
      Supplier: Supplier,
      Survey: Survey,
      SurveyResponse: SurveyResponse,
      Table: Table,
      TableSession: TableSession,
      TechnicalSpecification: TechnicalSpecification,
      User: User,
      UserPermissionOverride: UserPermissionOverride,
      UserRestaurant: UserRestaurant,
      UserRole: UserRole,
      WaiterCall: WaiterCall,
      WhatsappMessage: WhatsappMessage
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  Sequelize: <ref *8> [class Sequelize] {
    version: [Getter],
    options: { hooks: {} },

    Utils: {
      classToInvokable: [Function: classToInvokable],
      joinSQLFragments: [Function: joinSQLFragments],
      useInflection: [Function: useInflection],
      camelizeIf: [Function: camelizeIf],
      underscoredIf: [Function: underscoredIf],
      isPrimitive: [Function: isPrimitive],
      mergeDefaults: [Function: mergeDefaults],
      merge: [Function: merge],
      spliceStr: [Function: spliceStr],
      camelize: [Function: camelize],
      underscore: [Function: underscore],
      singularize: [Function: singularize],
      pluralize: [Function: pluralize],
      format: [Function: format],
      formatNamedParameters: [Function: formatNamedParameters],
      cloneDeep: [Function: cloneDeep],
      mapFinderOptions: [Function: mapFinderOptions],
      mapOptionFieldNames: [Function: mapOptionFieldNames],
      mapWhereFieldNames: [Function: mapWhereFieldNames],
      mapValueFieldNames: [Function: mapValueFieldNames],
      isColString: [Function: isColString],
      canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
      combineTableNames: [Function: combineTableNames],
      toDefaultValue: [Function: toDefaultValue],
      defaultValueSchemable: [Function: defaultValueSchemable],
      removeNullValuesFromHash: [Function: removeNullValuesFromHash],
      now: [Function: now],
      TICK_CHAR: '`',
      addTicks: [Function: addTicks],
      removeTicks: [Function: removeTicks],
      flattenObjectDeep: [Function: flattenObjectDeep],
      SequelizeMethod: [class SequelizeMethod],
      Fn: [class Fn extends SequelizeMethod],
      Col: [class Col extends SequelizeMethod],
      Cast: [class Cast extends SequelizeMethod],
      Literal: [class Literal extends SequelizeMethod],
      Json: [class Json extends SequelizeMethod],
      Where: [class Where extends SequelizeMethod],
      getOperators: [Function: getOperators],
      getComplexKeys: [Function: getComplexKeys],
      getComplexSize: [Function: getComplexSize],
      isWhereEmpty: [Function: isWhereEmpty],
      generateEnumName: [Function: generateEnumName],
      camelizeObjectKeys: [Function: camelizeObjectKeys],
      defaults: [Function: defaults],
      nameIndex: [Function: nameIndex],
      intersects: [Function: intersects],
      safeStringifyJson: [Function: safeStringifyJson]
    },

{
      eq: Symbol(eq),
      ne: Symbol(ne),
      gte: Symbol(gte),
      gt: Symbol(gt),
      lte: Symbol(lte),
      lt: Symbol(lt),
      not: Symbol(not),
      is: Symbol(is),
      in: Symbol(in),
      notIn: Symbol(notIn),
      like: Symbol(like),
      notLike: Symbol(notLike),
      iLike: Symbol(iLike),
      notILike: Symbol(notILike),
      startsWith: Symbol(startsWith),
      endsWith: Symbol(endsWith),
      substring: Symbol(substring),
      regexp: Symbol(regexp),
      notRegexp: Symbol(notRegexp),
      iRegexp: Symbol(iRegexp),
      notIRegexp: Symbol(notIRegexp),
      between: Symbol(between),
      notBetween: Symbol(notBetween),
      overlap: Symbol(overlap),
      contains: Symbol(contains),
      contained: Symbol(contained),
      adjacent: Symbol(adjacent),
      strictLeft: Symbol(strictLeft),
      strictRight: Symbol(strictRight),
      noExtendRight: Symbol(noExtendRight),
      noExtendLeft: Symbol(noExtendLeft),
      and: Symbol(and),
      or: Symbol(or),
      any: Symbol(any),
      all: Symbol(all),
      values: Symbol(values),
      col: Symbol(col),
      placeholder: Symbol(placeholder),
      join: Symbol(join),
      match: Symbol(match)
    },
    TableHints: {
      NOLOCK: 'NOLOCK',
      READUNCOMMITTED: 'READUNCOMMITTED',
      UPDLOCK: 'UPDLOCK',
      REPEATABLEREAD: 'REPEATABLEREAD',
      SERIALIZABLE: 'SERIALIZABLE',
      READCOMMITTED: 'READCOMMITTED',
      TABLOCK: 'TABLOCK',
      TABLOCKX: 'TABLOCKX',
      PAGLOCK: 'PAGLOCK',
      ROWLOCK: 'ROWLOCK',
      NOWAIT: 'NOWAIT',
      READPAST: 'READPAST',
      XLOCK: 'XLOCK',
      SNAPSHOT: 'SNAPSHOT',
      NOEXPAND: 'NOEXPAND'
    },
    IndexHints: { USE: 'USE', FORCE: 'FORCE', IGNORE: 'IGNORE' },
    Transaction: <ref *2> [class Transaction] {
      Transaction: [Circular *2],
      default: [Circular *2]
    },
    QueryTypes: {
      SELECT: 'SELECT',
      INSERT: 'INSERT',
      UPDATE: 'UPDATE',
      BULKUPDATE: 'BULKUPDATE',
      BULKDELETE: 'BULKDELETE',
      DELETE: 'DELETE',
      UPSERT: 'UPSERT',
      VERSION: 'VERSION',
      SHOWTABLES: 'SHOWTABLES',
      SHOWINDEXES: 'SHOWINDEXES',
      DESCRIBE: 'DESCRIBE',
      RAW: 'RAW',
      FOREIGNKEYS: 'FOREIGNKEYS',
      SHOWCONSTRAINTS: 'SHOWCONSTRAINTS'
    },
    Validator: <ref *3> {
      version: '13.12.0',
      toDate: [Function],
      toFloat: [Function],
      toInt: [Function],
      toBoolean: [Function],
      equals: [Function],
      contains: [Function: contains],
      matches: [Function],
      isEmail: [Function],
      isURL: [Function],
      isMACAddress: [Function],
      isIP: [Function],
      isIPRange: [Function],
      isFQDN: [Function],
      isBoolean: [Function],
      isIBAN: [Function: isIBAN],
      isBIC: [Function],
      isAbaRouting: [Function],
      isAlpha: [Function: isAlpha],
      isAlphaLocales: [Array],
      isAlphanumeric: [Function: isAlphanumeric],
      isAlphanumericLocales: [Array],
      isNumeric: [Function],
      isPassportNumber: [Function],
      isPort: [Function],
      isLowercase: [Function],
      isUppercase: [Function],
      isAscii: [Function],
      isFullWidth: [Function: isFullWidth],
      isHalfWidth: [Function: isHalfWidth],
      isVariableWidth: [Function],
      isMultibyte: [Function],
      isSemVer: [Function],
      isSurrogatePair: [Function],
      isInt: [Function],
      isIMEI: [Function],
      isFloat: [Function: isFloat],
      isFloatLocales: [Array],
      isDecimal: [Function: isDecimal],
      isHexadecimal: [Function],
      isOctal: [Function],
      isDivisibleBy: [Function],
      isHexColor: [Function],
      isRgbColor: [Function],
      isHSL: [Function],
      isISRC: [Function],
      isMD5: [Function],
      isHash: [Function],
      isJWT: [Function],
      isJSON: [Function],
      isEmpty: [Function],
      isLength: [Function],
      isLocale: [Function],
      isByteLength: [Function],
      isUUID: [Function],
      isMongoId: [Function],
      isAfter: [Function],
      isBefore: [Function],
      isIn: [Function],
      isLuhnNumber: [Function],
      isCreditCard: [Function],
      isIdentityCard: [Function],
      isEAN: [Function],
      isISIN: [Function],
      isISBN: [Function],
      isISSN: [Function],
      isMobilePhone: [Function: isMobilePhone],
      isMobilePhoneLocales: [Array],
      isPostalCode: [Function: isPostalCode],
      isPostalCodeLocales: [Array],
      isEthereumAddress: [Function],
      isCurrency: [Function],
      isBtcAddress: [Function],
      isISO6346: [Function: isISO6346],
      isFreightContainerID: [Function: isISO6346],
      isISO6391: [Function],
      isISO8601: [Function],
      isRFC3339: [Function],
      isISO31661Alpha2: [Function: isISO31661Alpha2],
      isISO31661Alpha3: [Function],
      isISO4217: [Function: isISO4217],
      isBase32: [Function],
      isBase58: [Function],
      isBase64: [Function],
      isDataURI: [Function],
      isMagnetURI: [Function],
      isMailtoURI: [Function],
      isMimeType: [Function],
      isLatLong: [Function],
      ltrim: [Function],
      rtrim: [Function],
      trim: [Function],
      escape: [Function],
      unescape: [Function],
      stripLow: [Function],
      whitelist: [Function],
      blacklist: [Function],
      isWhitelisted: [Function],
      normalizeEmail: [Function],
      toString: [Function: toString],
      isSlug: [Function],
      isStrongPassword: [Function],
      isTaxID: [Function],
      isDate: [Function (anonymous)],
      isTime: [Function],
      isLicensePlate: [Function],
      isVAT: [Function: isVAT],
      ibanLocales: [Array],
      default: [Circular *3],
      isImmutable: [Function (anonymous)],
      notNull: [Function (anonymous)],
      extend: [Function: extend],
      notEmpty: [Function: notEmpty],
      len: [Function: len],
      isUrl: [Function: isUrl],
      isIPv6: [Function: isIPv6],
      isIPv4: [Function: isIPv4],
      notIn: [Function: notIn],
      regex: [Function: regex],
      notRegex: [Function: notRegex],
      min: [Function: min],
      max: [Function: max],
      not: [Function: not],
      notContains: [Function: notContains],
      is: [Function: is],
      isNull: [Function]
    },
    Model: Model,
    QueryInterface: [class QueryInterface],
    BelongsTo: <ref *4> [class BelongsTo extends Association] {
      BelongsTo: [Circular *4],
      default: [Circular *4]
    },
    HasOne: [class HasOne extends Association],
    HasMany: <ref *5> [class HasMany extends Association] {
      HasMany: [Circular *5],
      default: [Circular *5]
    },
    BelongsToMany: <ref *6> [class BelongsToMany extends Association] {
      BelongsToMany: [Circular *6],
      default: [Circular *6]
    },
    DataTypes: {
      ABSTRACT: [Function],
      STRING: [Function],
      CHAR: [Function],
      TEXT: [Function],
      NUMBER: [Function],
      TINYINT: [Function],
      SMALLINT: [Function],
      MEDIUMINT: [Function],
      INTEGER: [Function],
      BIGINT: [Function],
      FLOAT: [Function],
      TIME: [Function],
      DATE: [Function],
      DATEONLY: [Function],
      BOOLEAN: [Function],
      NOW: [Function],
      BLOB: [Function],
      DECIMAL: [Function],
      NUMERIC: [Function],
      UUID: [Function],
      UUIDV1: [Function],
      UUIDV4: [Function],
      HSTORE: [Function],
      JSON: [Function],
      JSONB: [Function],
      VIRTUAL: [Function],
      ARRAY: [Function],
      ENUM: [Function],
      RANGE: [Function],
      REAL: [Function],
      'DOUBLE PRECISION': [Function],
      DOUBLE: [Function],
      GEOMETRY: [Function],
      GEOGRAPHY: [Function],
      CIDR: [Function],
      INET: [Function],
      MACADDR: [Function],
      CITEXT: [Function],
      TSVECTOR: [Function],
      postgres: [Object],
      mysql: [Object],
      mariadb: [Object],
      sqlite: [Object],
      mssql: [Object],
      db2: [Object],
      snowflake: [Object],
      oracle: [Object]
    },
    ABSTRACT: [class ABSTRACT] { types: {}, key: 'ABSTRACT' },
    STRING: [class STRING extends ABSTRACT] { types: [Object], key: 'STRING' },
    CHAR: [class CHAR extends STRING] { types: [Object], key: 'CHAR' },
    TEXT: [class TEXT extends ABSTRACT] { types: [Object], key: 'TEXT' },
    NUMBER: [class NUMBER extends ABSTRACT] { types: {}, key: 'NUMBER' },
    TINYINT: [class TINYINT extends INTEGER] { types: [Object], key: 'TINYINT' },
    SMALLINT: [class SMALLINT extends INTEGER] {
      types: [Object],
      key: 'SMALLINT'
    },
    MEDIUMINT: [class MEDIUMINT extends INTEGER] {
      types: [Object],
      key: 'MEDIUMINT'
    },
    INTEGER: [class INTEGER extends NUMBER] { types: [Object], key: 'INTEGER' },
    BIGINT: [class BIGINT extends INTEGER] { types: [Object], key: 'BIGINT' },
    FLOAT: [class FLOAT extends NUMBER] { types: [Object], key: 'FLOAT' },
    TIME: [class TIME extends ABSTRACT] { types: [Object], key: 'TIME' },
    DATE: [class DATE extends ABSTRACT] { types: [Object], key: 'DATE' },
    DATEONLY: [class DATEONLY extends ABSTRACT] {
      types: [Object],
      key: 'DATEONLY'
    },
    BOOLEAN: [class BOOLEAN extends ABSTRACT] {
      parse: [Function: _sanitize],
      types: [Object],
      key: 'BOOLEAN'
    },
    NOW: [class NOW extends ABSTRACT] { types: {}, key: 'NOW' },
    BLOB: [class BLOB extends ABSTRACT] { types: [Object], key: 'BLOB' },
    DECIMAL: [class DECIMAL extends NUMBER] { types: [Object], key: 'DECIMAL' },
    NUMERIC: [class DECIMAL extends NUMBER] { types: [Object], key: 'DECIMAL' },
    UUID: [class UUID extends ABSTRACT] { types: [Object], key: 'UUID' },
    UUIDV1: [class UUIDV1 extends ABSTRACT] { types: {}, key: 'UUIDV1' },
    UUIDV4: [class UUIDV4 extends ABSTRACT] { types: {}, key: 'UUIDV4' },
    HSTORE: [class HSTORE extends ABSTRACT] { types: [Object], key: 'HSTORE' },
    JSON: [class JSONTYPE extends ABSTRACT] { types: [Object], key: 'JSON' },
    JSONB: [class JSONB extends JSONTYPE] { types: [Object], key: 'JSONB' },
    VIRTUAL: [class VIRTUAL extends ABSTRACT] { types: {}, key: 'VIRTUAL' },
    ARRAY: [class ARRAY extends ABSTRACT] { types: {}, key: 'ARRAY' },
    ENUM: [class ENUM extends ABSTRACT] { types: [Object], key: 'ENUM' },
    RANGE: [class RANGE extends ABSTRACT] { types: [Object], key: 'RANGE' },
    REAL: [class REAL extends NUMBER] { types: [Object], key: 'REAL' },
    'DOUBLE PRECISION': [class DOUBLE extends NUMBER] {
      types: [Object],
      key: 'DOUBLE PRECISION'
    },
    DOUBLE: [class DOUBLE extends NUMBER] {
      types: [Object],
      key: 'DOUBLE PRECISION'
    },
    GEOMETRY: [class GEOMETRY extends ABSTRACT] {
      types: [Object],
      key: 'GEOMETRY'
    },
    GEOGRAPHY: [class GEOGRAPHY extends ABSTRACT] {
      types: [Object],
      key: 'GEOGRAPHY'
    },
    CIDR: [class CIDR extends ABSTRACT] { types: [Object], key: 'CIDR' },
    INET: [class INET extends ABSTRACT] { types: [Object], key: 'INET' },
    MACADDR: [class MACADDR extends ABSTRACT] { types: [Object], key: 'MACADDR' },
    CITEXT: [class CITEXT extends ABSTRACT] { types: [Object], key: 'CITEXT' },
    TSVECTOR: [class TSVECTOR extends ABSTRACT] {
      types: [Object],
      key: 'TSVECTOR'
    },
    postgres: {
      DECIMAL: [class DECIMAL extends DECIMAL],
      BLOB: [class BLOB extends BLOB],
      STRING: [class STRING extends STRING],
      CHAR: [class CHAR extends CHAR],
      TEXT: [class TEXT extends TEXT],
      CITEXT: [class CITEXT extends CITEXT],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [Function],
      BIGINT: [class BIGINT extends BIGINT],
      BOOLEAN: [Function],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      REAL: [class REAL extends REAL],
      'DOUBLE PRECISION': [class DOUBLE extends DOUBLE],
      FLOAT: [class FLOAT extends FLOAT],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      GEOGRAPHY: [class GEOGRAPHY extends GEOGRAPHY],
      HSTORE: [class HSTORE extends HSTORE],
      RANGE: [class RANGE extends RANGE],
      ENUM: [class ENUM extends ENUM]
    },

    mysql: {
      ENUM: [class ENUM extends ENUM],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      DECIMAL: [class DECIMAL extends DECIMAL],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    mariadb: {
      ENUM: [class ENUM extends ENUM],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      DECIMAL: [class DECIMAL extends DECIMAL],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    sqlite: {
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      STRING: [class STRING extends STRING],
      CHAR: [class CHAR extends CHAR],
      NUMBER: [class NUMBER extends NUMBER],
      FLOAT: [Function],
      REAL: [Function],
      'DOUBLE PRECISION': [Function],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      MEDIUMINT: [class MEDIUMINT extends MEDIUMINT],
      INTEGER: [class INTEGER extends INTEGER],
      BIGINT: [class BIGINT extends BIGINT],
      TEXT: [class TEXT extends TEXT],
      ENUM: [class ENUM extends ENUM],
      JSON: [class JSONTYPE extends JSONTYPE],
      CITEXT: [class CITEXT extends CITEXT]
    },

    mssql: {
      BLOB: [class BLOB extends BLOB],
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      ENUM: [class ENUM extends ENUM],
      STRING: [class STRING extends STRING],
      UUID: [class UUID extends UUID],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      NOW: [class NOW extends NOW],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [class INTEGER extends INTEGER],
      BIGINT: [class BIGINT extends BIGINT],
      REAL: [class REAL extends REAL],
      FLOAT: [class FLOAT extends FLOAT],
      TEXT: [class TEXT extends TEXT]
    },
    db2: {
      BLOB: [class BLOB extends BLOB],
      BOOLEAN: [Function],
      ENUM: [class ENUM extends ENUM],
      STRING: [class STRING extends STRING],
      UUID: [class UUID extends UUID],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      NOW: [class NOW extends NOW],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [class INTEGER extends INTEGER],
      DOUBLE: [Function],
      'DOUBLE PRECISION': [Function],
      BIGINT: [class BIGINT extends BIGINT],
      REAL: [class REAL extends REAL],
      FLOAT: [class FLOAT extends FLOAT],
      TEXT: [class TEXT extends TEXT]
    },
    snowflake: {
      TEXT: [class TEXT extends TEXT],
      DATE: [class DATE extends DATE],
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    oracle: {
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      'DOUBLE PRECISION': [class DOUBLE extends DOUBLE],
      DOUBLE: [class DOUBLE extends DOUBLE],
      STRING: [class STRING extends STRING],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      MEDIUMINT: [class MEDIUMINT extends MEDIUMINT],
      BIGINT: [class BIGINT extends BIGINT],
      NUMBER: [class NUMBER extends NUMBER],
      INTEGER: [class INTEGER extends INTEGER],
      FLOAT: [class FLOAT extends FLOAT],
      UUID: [class UUID extends UUID],
      DATEONLY: [class DATEONLY extends DATEONLY],
      DATE: [class DATE extends DATE],
      NOW: [class NOW extends NOW],
      BLOB: [class BLOB extends BLOB],
      ENUM: [class ENUM extends ENUM],
      TEXT: [class TEXT extends TEXT],
      CHAR: [class CHAR extends CHAR],
      JSON: [class JSONTYPE extends JSONTYPE],
      REAL: [class REAL extends REAL],
      DECIMAL: [class DECIMAL extends DECIMAL]
    },
    Deferrable: {
      INITIALLY_DEFERRED: [class INITIALLY_DEFERRED extends ABSTRACT],
      INITIALLY_IMMEDIATE: [class INITIALLY_IMMEDIATE extends ABSTRACT],
      NOT: [class NOT extends ABSTRACT],
      SET_DEFERRED: [class SET_DEFERRED extends ABSTRACT],
      SET_IMMEDIATE: [class SET_IMMEDIATE extends ABSTRACT]
    },
    Association: <ref *7> [class Association] {
      BelongsTo: [Function],
      HasOne: [class HasOne extends Association],
      HasMany: [Function],
      BelongsToMany: [Function],
      default: [Circular *7],
      Association: [Circular *7]
    },
    useInflection: [Function: useInflection],
    _setupHooks: [Function: _setupHooks],
    runHooks: [AsyncFunction: runHooks],
    addHook: [Function: addHook],
    removeHook: [Function: removeHook],
    hasHook: [Function: hasHook],
    hasHooks: [Function: hasHook],
    beforeValidate: [Function (anonymous)],
    afterValidate: [Function (anonymous)],
    validationFailed: [Function (anonymous)],
    beforeCreate: [Function (anonymous)],
    afterCreate: [Function (anonymous)],
    beforeDestroy: [Function (anonymous)],
    afterDestroy: [Function (anonymous)],
    beforeRestore: [Function (anonymous)],
    afterRestore: [Function (anonymous)],
    beforeUpdate: [Function (anonymous)],
    afterUpdate: [Function (anonymous)],
    beforeSave: [Function (anonymous)],
    afterSave: [Function (anonymous)],
    beforeUpsert: [Function (anonymous)],
    afterUpsert: [Function (anonymous)],
    beforeBulkCreate: [Function (anonymous)],
    afterBulkCreate: [Function (anonymous)],
    beforeBulkDestroy: [Function (anonymous)],
    afterBulkDestroy: [Function (anonymous)],
    beforeBulkRestore: [Function (anonymous)],
    afterBulkRestore: [Function (anonymous)],
    beforeBulkUpdate: [Function (anonymous)],
    afterBulkUpdate: [Function (anonymous)],
    beforeFind: [Function (anonymous)],
    beforeFindAfterExpandIncludeAll: [Function (anonymous)],
    beforeFindAfterOptions: [Function (anonymous)],
    afterFind: [Function (anonymous)],
    beforeCount: [Function (anonymous)],
    beforeDefine: [Function (anonymous)],
    afterDefine: [Function (anonymous)],
    beforeInit: [Function (anonymous)],
    afterInit: [Function (anonymous)],
    beforeAssociate: [Function (anonymous)],
    afterAssociate: [Function (anonymous)],
    beforeConnect: [Function (anonymous)],
    afterConnect: [Function (anonymous)],
    beforeDisconnect: [Function (anonymous)],
    afterDisconnect: [Function (anonymous)],
    beforePoolAcquire: [Function (anonymous)],
    afterPoolAcquire: [Function (anonymous)],
    beforeSync: [Function (anonymous)],
    afterSync: [Function (anonymous)],
    beforeBulkSync: [Function (anonymous)],
    afterBulkSync: [Function (anonymous)],
    beforeQuery: [Function (anonymous)],
    afterQuery: [Function (anonymous)],
    Error: [class BaseError extends Error],
    AccessDeniedError: [class AccessDeniedError extends ConnectionError],
    AggregateError: [class AggregateError extends BaseError],
    AssociationError: [class AssociationError extends BaseError],
    AsyncQueueError: [class AsyncQueueError extends BaseError],
    BaseError: [class BaseError extends Error],
    BulkRecordError: [class BulkRecordError extends BaseError],
    ConnectionAcquireTimeoutError: [class ConnectionAcquireTimeoutError extends ConnectionError],
    ConnectionError: [class ConnectionError extends BaseError],
    ConnectionRefusedError: [class ConnectionRefusedError extends ConnectionError],
    ConnectionTimedOutError: [class ConnectionTimedOutError extends ConnectionError],
    DatabaseError: [class DatabaseError extends BaseError],
    EagerLoadingError: [class EagerLoadingError extends BaseError],
    EmptyResultError: [class EmptyResultError extends BaseError],
    ExclusionConstraintError: [class ExclusionConstraintError extends DatabaseError],
    ForeignKeyConstraintError: [class ForeignKeyConstraintError extends DatabaseError],
    HostNotFoundError: [class HostNotFoundError extends ConnectionError],
    HostNotReachableError: [class HostNotReachableError extends ConnectionError],
    InstanceError: [class InstanceError extends BaseError],
    InvalidConnectionError: [class InvalidConnectionError extends ConnectionError],
    OptimisticLockError: [class OptimisticLockError extends BaseError],
    QueryError: [class QueryError extends BaseError],
    SequelizeScopeError: [class SequelizeScopeError extends BaseError],
    TimeoutError: [class TimeoutError extends DatabaseError],
    UniqueConstraintError: [class UniqueConstraintError extends ValidationError],
    UnknownConstraintError: [class UnknownConstraintError extends DatabaseError],
    ValidationError: [class ValidationError extends BaseError],
    ValidationErrorItem: [class ValidationErrorItem] {
      TypeStringMap: [Object],
      Origins: [Object]
    },
    ValidationErrorItemOrigin: { CORE: 'CORE', DB: 'DB', FUNCTION: 'FUNCTION' },
    ValidationErrorItemType: {
      'notnull violation': 'CORE',
      'string violation': 'CORE',
      'unique violation': 'DB',
      'validation error': 'FUNCTION'
    },
    Sequelize: [Circular *8],
    default: [Circular *8]
  },
  testConnection: [AsyncFunction (anonymous)],
  syncDatabase: [AsyncFunction (anonymous)]
}
DB.models in auth.controller.js: undefined
🚀 Servidor rodando na porta 5000
Redis Client Connected
DB object in authMiddleware before calling authService.getMe: {
  Action: Action,
  Addon: Addon,
  Answer: Answer,
  AuditLog: AuditLog,
  CashRegisterCategory: CashRegisterCategory,
  CashRegisterMovement: CashRegisterMovement,
  CashRegisterSession: CashRegisterSession,
  Category: Category,
  Checkin: Checkin,
  Coupon: Coupon,
  Customer: Customer,
  Feature: Feature,
  Feedback: Feedback,
  FinancialCategory: FinancialCategory,
  FinancialTransaction: FinancialTransaction,
  Ingredient: Ingredient,
  LossRecord: LossRecord,
  Module: Module,
  NpsCriterion: NpsCriterion,
  Order: Order,
  PaymentMethod: PaymentMethod,
  PrintedLabel: PrintedLabel,
  Product: Product,
  ProductionRecord: ProductionRecord,
  ProductionRecordItem: ProductionRecordItem,
  QRCode: QRCode,
  Question: Question,
  RecipeIngredient: RecipeIngredient,
  Restaurant: Restaurant,
  RestaurantEntitlement: RestaurantEntitlement,
  Reward: Reward,
  Role: Role,
  RolePermission: RolePermission,
  Stock: Stock,
  StockCount: StockCount,
  StockCountItem: StockCountItem,
  StockMovement: StockMovement,
  Submodule: Submodule,
  Supplier: Supplier,
  Survey: Survey,
  SurveyResponse: SurveyResponse,
  Table: Table,
  TableSession: TableSession,
  TechnicalSpecification: TechnicalSpecification,
  User: User,
  UserPermissionOverride: UserPermissionOverride,
  UserRestaurant: UserRestaurant,
  UserRole: UserRole,
  WaiterCall: WaiterCall,
  WhatsappMessage: WhatsappMessage,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'postgres',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: false,
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.19.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      username: 'postgres',
      password: 'b74996144735db08d6e091f460df4184',
      database: 'feedeliza',
      port: '5432'
    },
    config: {
      database: 'feedeliza',
      username: 'postgres',
      password: 'b74996144735db08d6e091f460df4184',
      host: 'postgres',
      port: '5432',
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      Action: Action,
      Addon: Addon,
      Answer: Answer,
      AuditLog: AuditLog,
      CashRegisterCategory: CashRegisterCategory,
      CashRegisterMovement: CashRegisterMovement,
      CashRegisterSession: CashRegisterSession,
      Category: Category,
      Checkin: Checkin,
      Coupon: Coupon,
      Customer: Customer,
      Feature: Feature,
      Feedback: Feedback,
      FinancialCategory: FinancialCategory,
      FinancialTransaction: FinancialTransaction,
      Ingredient: Ingredient,
      LossRecord: LossRecord,
      Module: Module,
      NpsCriterion: NpsCriterion,
      Order: Order,
      PaymentMethod: PaymentMethod,
      PrintedLabel: PrintedLabel,
      Product: Product,
      ProductionRecord: ProductionRecord,
      ProductionRecordItem: ProductionRecordItem,
      QRCode: QRCode,
      Question: Question,
      RecipeIngredient: RecipeIngredient,
      Restaurant: Restaurant,
      RestaurantEntitlement: RestaurantEntitlement,
      Reward: Reward,
      Role: Role,
      RolePermission: RolePermission,
      Stock: Stock,
      StockCount: StockCount,
      StockCountItem: StockCountItem,
      StockMovement: StockMovement,
      Submodule: Submodule,
      Supplier: Supplier,
      Survey: Survey,
      SurveyResponse: SurveyResponse,
      Table: Table,
      TableSession: TableSession,
      TechnicalSpecification: TechnicalSpecification,
      User: User,
      UserPermissionOverride: UserPermissionOverride,
      UserRestaurant: UserRestaurant,
      UserRole: UserRole,
      WaiterCall: WaiterCall,
      WhatsappMessage: WhatsappMessage
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  Sequelize: <ref *8> [class Sequelize] {
    version: [Getter],
    options: { hooks: {} },

    Utils: {
      classToInvokable: [Function: classToInvokable],
      joinSQLFragments: [Function: joinSQLFragments],
      useInflection: [Function: useInflection],
      camelizeIf: [Function: camelizeIf],
      underscoredIf: [Function: underscoredIf],
      isPrimitive: [Function: isPrimitive],
      mergeDefaults: [Function: mergeDefaults],
      merge: [Function: merge],
      spliceStr: [Function: spliceStr],
      camelize: [Function: camelize],
      underscore: [Function: underscore],
      singularize: [Function: singularize],
      pluralize: [Function: pluralize],
      format: [Function: format],
      formatNamedParameters: [Function: formatNamedParameters],
      cloneDeep: [Function: cloneDeep],
      mapFinderOptions: [Function: mapFinderOptions],
      mapOptionFieldNames: [Function: mapOptionFieldNames],
      mapWhereFieldNames: [Function: mapWhereFieldNames],
      mapValueFieldNames: [Function: mapValueFieldNames],
      isColString: [Function: isColString],
      canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
      combineTableNames: [Function: combineTableNames],
      toDefaultValue: [Function: toDefaultValue],
      defaultValueSchemable: [Function: defaultValueSchemable],
      removeNullValuesFromHash: [Function: removeNullValuesFromHash],
      now: [Function: now],
      TICK_CHAR: '`',
      addTicks: [Function: addTicks],
      removeTicks: [Function: removeTicks],
      flattenObjectDeep: [Function: flattenObjectDeep],
      SequelizeMethod: [class SequelizeMethod],
      Fn: [class Fn extends SequelizeMethod],
      Col: [class Col extends SequelizeMethod],
      Cast: [class Cast extends SequelizeMethod],
      Literal: [class Literal extends SequelizeMethod],
      Json: [class Json extends SequelizeMethod],
      Where: [class Where extends SequelizeMethod],
      getOperators: [Function: getOperators],
      getComplexKeys: [Function: getComplexKeys],
      getComplexSize: [Function: getComplexSize],
      isWhereEmpty: [Function: isWhereEmpty],
      generateEnumName: [Function: generateEnumName],
      camelizeObjectKeys: [Function: camelizeObjectKeys],
      defaults: [Function: defaults],
      nameIndex: [Function: nameIndex],
      intersects: [Function: intersects],
      safeStringifyJson: [Function: safeStringifyJson]
    },

{
      eq: Symbol(eq),
      ne: Symbol(ne),
      gte: Symbol(gte),
      gt: Symbol(gt),
      lte: Symbol(lte),
      lt: Symbol(lt),
      not: Symbol(not),
      is: Symbol(is),
      in: Symbol(in),
      notIn: Symbol(notIn),
      like: Symbol(like),
      notLike: Symbol(notLike),
      iLike: Symbol(iLike),
      notILike: Symbol(notILike),
      startsWith: Symbol(startsWith),
      endsWith: Symbol(endsWith),
      substring: Symbol(substring),
      regexp: Symbol(regexp),
      notRegexp: Symbol(notRegexp),
      iRegexp: Symbol(iRegexp),
      notIRegexp: Symbol(notIRegexp),
      between: Symbol(between),
      notBetween: Symbol(notBetween),
      overlap: Symbol(overlap),
      contains: Symbol(contains),
      contained: Symbol(contained),
      adjacent: Symbol(adjacent),
      strictLeft: Symbol(strictLeft),
      strictRight: Symbol(strictRight),
      noExtendRight: Symbol(noExtendRight),
      noExtendLeft: Symbol(noExtendLeft),
      and: Symbol(and),
      or: Symbol(or),
      any: Symbol(any),
      all: Symbol(all),
      values: Symbol(values),
      col: Symbol(col),
      placeholder: Symbol(placeholder),
      join: Symbol(join),
      match: Symbol(match)
    },
    TableHints: {
      NOLOCK: 'NOLOCK',
      READUNCOMMITTED: 'READUNCOMMITTED',
      UPDLOCK: 'UPDLOCK',
      REPEATABLEREAD: 'REPEATABLEREAD',
      SERIALIZABLE: 'SERIALIZABLE',
      READCOMMITTED: 'READCOMMITTED',
      TABLOCK: 'TABLOCK',
      TABLOCKX: 'TABLOCKX',
      PAGLOCK: 'PAGLOCK',
      ROWLOCK: 'ROWLOCK',
      NOWAIT: 'NOWAIT',
      READPAST: 'READPAST',
      XLOCK: 'XLOCK',
      SNAPSHOT: 'SNAPSHOT',
      NOEXPAND: 'NOEXPAND'
    },
    IndexHints: { USE: 'USE', FORCE: 'FORCE', IGNORE: 'IGNORE' },
    Transaction: <ref *2> [class Transaction] {
      Transaction: [Circular *2],
      default: [Circular *2]
    },
    QueryTypes: {
      SELECT: 'SELECT',
      INSERT: 'INSERT',
      UPDATE: 'UPDATE',
      BULKUPDATE: 'BULKUPDATE',
      BULKDELETE: 'BULKDELETE',
      DELETE: 'DELETE',
      UPSERT: 'UPSERT',
      VERSION: 'VERSION',
      SHOWTABLES: 'SHOWTABLES',
      SHOWINDEXES: 'SHOWINDEXES',
      DESCRIBE: 'DESCRIBE',
      RAW: 'RAW',
      FOREIGNKEYS: 'FOREIGNKEYS',
      SHOWCONSTRAINTS: 'SHOWCONSTRAINTS'
    },
    Validator: <ref *3> {
      version: '13.12.0',
      toDate: [Function],
      toFloat: [Function],
      toInt: [Function],
      toBoolean: [Function],
      equals: [Function],
      contains: [Function: contains],
      matches: [Function],
      isEmail: [Function],
      isURL: [Function],
      isMACAddress: [Function],
      isIP: [Function],
      isIPRange: [Function],
      isFQDN: [Function],
      isBoolean: [Function],
      isIBAN: [Function: isIBAN],
      isBIC: [Function],
      isAbaRouting: [Function],
      isAlpha: [Function: isAlpha],
      isAlphaLocales: [Array],
      isAlphanumeric: [Function: isAlphanumeric],
      isAlphanumericLocales: [Array],
      isNumeric: [Function],
      isPassportNumber: [Function],
      isPort: [Function],
      isLowercase: [Function],
      isUppercase: [Function],
      isAscii: [Function],
      isFullWidth: [Function: isFullWidth],
      isHalfWidth: [Function: isHalfWidth],
      isVariableWidth: [Function],
      isMultibyte: [Function],
      isSemVer: [Function],
      isSurrogatePair: [Function],
      isInt: [Function],
      isIMEI: [Function],
      isFloat: [Function: isFloat],
      isFloatLocales: [Array],
      isDecimal: [Function: isDecimal],
      isHexadecimal: [Function],
      isOctal: [Function],
      isDivisibleBy: [Function],
      isHexColor: [Function],
      isRgbColor: [Function],
      isHSL: [Function],
      isISRC: [Function],
      isMD5: [Function],
      isHash: [Function],
      isJWT: [Function],
      isJSON: [Function],
      isEmpty: [Function],
      isLength: [Function],
      isLocale: [Function],
      isByteLength: [Function],
      isUUID: [Function],
      isMongoId: [Function],
      isAfter: [Function],
      isBefore: [Function],
      isIn: [Function],
      isLuhnNumber: [Function],
      isCreditCard: [Function],
      isIdentityCard: [Function],
      isEAN: [Function],
      isISIN: [Function],
      isISBN: [Function],
      isISSN: [Function],
      isMobilePhone: [Function: isMobilePhone],
      isMobilePhoneLocales: [Array],
      isPostalCode: [Function: isPostalCode],
      isPostalCodeLocales: [Array],
      isEthereumAddress: [Function],
      isCurrency: [Function],
      isBtcAddress: [Function],
      isISO6346: [Function: isISO6346],
      isFreightContainerID: [Function: isISO6346],
      isISO6391: [Function],
      isISO8601: [Function],
      isRFC3339: [Function],
      isISO31661Alpha2: [Function: isISO31661Alpha2],
      isISO31661Alpha3: [Function],
      isISO4217: [Function: isISO4217],
      isBase32: [Function],
      isBase58: [Function],
      isBase64: [Function],
      isDataURI: [Function],
      isMagnetURI: [Function],
      isMailtoURI: [Function],
      isMimeType: [Function],
      isLatLong: [Function],
      ltrim: [Function],
      rtrim: [Function],
      trim: [Function],
      escape: [Function],
      unescape: [Function],
      stripLow: [Function],
      whitelist: [Function],
      blacklist: [Function],
      isWhitelisted: [Function],
      normalizeEmail: [Function],
      toString: [Function: toString],
      isSlug: [Function],
      isStrongPassword: [Function],
      isTaxID: [Function],
      isDate: [Function (anonymous)],
      isTime: [Function],
      isLicensePlate: [Function],
      isVAT: [Function: isVAT],
      ibanLocales: [Array],
      default: [Circular *3],
      isImmutable: [Function (anonymous)],
      notNull: [Function (anonymous)],
      extend: [Function: extend],
      notEmpty: [Function: notEmpty],
      len: [Function: len],
      isUrl: [Function: isUrl],
      isIPv6: [Function: isIPv6],
      isIPv4: [Function: isIPv4],
      notIn: [Function: notIn],
      regex: [Function: regex],
      notRegex: [Function: notRegex],
      min: [Function: min],
      max: [Function: max],
      not: [Function: not],
      notContains: [Function: notContains],
      is: [Function: is],
      isNull: [Function]
    },
    Model: Model,
    QueryInterface: [class QueryInterface],
    BelongsTo: <ref *4> [class BelongsTo extends Association] {
      BelongsTo: [Circular *4],
      default: [Circular *4]
    },
    HasOne: [class HasOne extends Association],
    HasMany: <ref *5> [class HasMany extends Association] {
      HasMany: [Circular *5],
      default: [Circular *5]
    },
    BelongsToMany: <ref *6> [class BelongsToMany extends Association] {
      BelongsToMany: [Circular *6],
      default: [Circular *6]
    },
    DataTypes: {
      ABSTRACT: [Function],
      STRING: [Function],
      CHAR: [Function],
      TEXT: [Function],
      NUMBER: [Function],
      TINYINT: [Function],
      SMALLINT: [Function],
      MEDIUMINT: [Function],
      INTEGER: [Function],
      BIGINT: [Function],
      FLOAT: [Function],
      TIME: [Function],
      DATE: [Function],
      DATEONLY: [Function],
      BOOLEAN: [Function],
      NOW: [Function],
      BLOB: [Function],
      DECIMAL: [Function],
      NUMERIC: [Function],
      UUID: [Function],
      UUIDV1: [Function],
      UUIDV4: [Function],
      HSTORE: [Function],
      JSON: [Function],
      JSONB: [Function],
      VIRTUAL: [Function],
      ARRAY: [Function],
      ENUM: [Function],
      RANGE: [Function],
      REAL: [Function],
      'DOUBLE PRECISION': [Function],
      DOUBLE: [Function],
      GEOMETRY: [Function],
      GEOGRAPHY: [Function],
      CIDR: [Function],
      INET: [Function],
      MACADDR: [Function],
      CITEXT: [Function],
      TSVECTOR: [Function],
      postgres: [Object],
      mysql: [Object],
      mariadb: [Object],
      sqlite: [Object],
      mssql: [Object],
      db2: [Object],
      snowflake: [Object],
      oracle: [Object]
    },
    ABSTRACT: [class ABSTRACT] { types: {}, key: 'ABSTRACT' },
    STRING: [class STRING extends ABSTRACT] { types: [Object], key: 'STRING' },
    CHAR: [class CHAR extends STRING] { types: [Object], key: 'CHAR' },
    TEXT: [class TEXT extends ABSTRACT] { types: [Object], key: 'TEXT' },
    NUMBER: [class NUMBER extends ABSTRACT] { types: {}, key: 'NUMBER' },
    TINYINT: [class TINYINT extends INTEGER] { types: [Object], key: 'TINYINT' },
    SMALLINT: [class SMALLINT extends INTEGER] {
      types: [Object],
      key: 'SMALLINT'
    },
    MEDIUMINT: [class MEDIUMINT extends INTEGER] {
      types: [Object],
      key: 'MEDIUMINT'
    },
    INTEGER: [class INTEGER extends NUMBER] { types: [Object], key: 'INTEGER' },
    BIGINT: [class BIGINT extends INTEGER] { types: [Object], key: 'BIGINT' },
    FLOAT: [class FLOAT extends NUMBER] { types: [Object], key: 'FLOAT' },
    TIME: [class TIME extends ABSTRACT] { types: [Object], key: 'TIME' },
    DATE: [class DATE extends ABSTRACT] { types: [Object], key: 'DATE' },
    DATEONLY: [class DATEONLY extends ABSTRACT] {
      types: [Object],
      key: 'DATEONLY'
    },
    BOOLEAN: [class BOOLEAN extends ABSTRACT] {
      parse: [Function: _sanitize],
      types: [Object],
      key: 'BOOLEAN'
    },
    NOW: [class NOW extends ABSTRACT] { types: {}, key: 'NOW' },
    BLOB: [class BLOB extends ABSTRACT] { types: [Object], key: 'BLOB' },
    DECIMAL: [class DECIMAL extends NUMBER] { types: [Object], key: 'DECIMAL' },
    NUMERIC: [class DECIMAL extends NUMBER] { types: [Object], key: 'DECIMAL' },
    UUID: [class UUID extends ABSTRACT] { types: [Object], key: 'UUID' },
    UUIDV1: [class UUIDV1 extends ABSTRACT] { types: {}, key: 'UUIDV1' },
    UUIDV4: [class UUIDV4 extends ABSTRACT] { types: {}, key: 'UUIDV4' },
    HSTORE: [class HSTORE extends ABSTRACT] { types: [Object], key: 'HSTORE' },
    JSON: [class JSONTYPE extends ABSTRACT] { types: [Object], key: 'JSON' },
    JSONB: [class JSONB extends JSONTYPE] { types: [Object], key: 'JSONB' },
    VIRTUAL: [class VIRTUAL extends ABSTRACT] { types: {}, key: 'VIRTUAL' },
    ARRAY: [class ARRAY extends ABSTRACT] { types: {}, key: 'ARRAY' },
    ENUM: [class ENUM extends ABSTRACT] { types: [Object], key: 'ENUM' },
    RANGE: [class RANGE extends ABSTRACT] { types: [Object], key: 'RANGE' },
    REAL: [class REAL extends NUMBER] { types: [Object], key: 'REAL' },
    'DOUBLE PRECISION': [class DOUBLE extends NUMBER] {
      types: [Object],
      key: 'DOUBLE PRECISION'
    },
    DOUBLE: [class DOUBLE extends NUMBER] {
      types: [Object],
      key: 'DOUBLE PRECISION'
    },
    GEOMETRY: [class GEOMETRY extends ABSTRACT] {
      types: [Object],
      key: 'GEOMETRY'
    },
    GEOGRAPHY: [class GEOGRAPHY extends ABSTRACT] {
      types: [Object],
      key: 'GEOGRAPHY'
    },
    CIDR: [class CIDR extends ABSTRACT] { types: [Object], key: 'CIDR' },
    INET: [class INET extends ABSTRACT] { types: [Object], key: 'INET' },
    MACADDR: [class MACADDR extends ABSTRACT] { types: [Object], key: 'MACADDR' },
    CITEXT: [class CITEXT extends ABSTRACT] { types: [Object], key: 'CITEXT' },
    TSVECTOR: [class TSVECTOR extends ABSTRACT] {
      types: [Object],
      key: 'TSVECTOR'
    },
    postgres: {
      DECIMAL: [class DECIMAL extends DECIMAL],
      BLOB: [class BLOB extends BLOB],
      STRING: [class STRING extends STRING],
      CHAR: [class CHAR extends CHAR],
      TEXT: [class TEXT extends TEXT],
      CITEXT: [class CITEXT extends CITEXT],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [Function],
      BIGINT: [class BIGINT extends BIGINT],
      BOOLEAN: [Function],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      REAL: [class REAL extends REAL],
      'DOUBLE PRECISION': [class DOUBLE extends DOUBLE],
      FLOAT: [class FLOAT extends FLOAT],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      GEOGRAPHY: [class GEOGRAPHY extends GEOGRAPHY],
      HSTORE: [class HSTORE extends HSTORE],
      RANGE: [class RANGE extends RANGE],
      ENUM: [class ENUM extends ENUM]
    },

    mysql: {
      ENUM: [class ENUM extends ENUM],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      DECIMAL: [class DECIMAL extends DECIMAL],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    mariadb: {
      ENUM: [class ENUM extends ENUM],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      DECIMAL: [class DECIMAL extends DECIMAL],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    sqlite: {
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      STRING: [class STRING extends STRING],
      CHAR: [class CHAR extends CHAR],
      NUMBER: [class NUMBER extends NUMBER],
      FLOAT: [Function],
      REAL: [Function],
      'DOUBLE PRECISION': [Function],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      MEDIUMINT: [class MEDIUMINT extends MEDIUMINT],
      INTEGER: [class INTEGER extends INTEGER],
      BIGINT: [class BIGINT extends BIGINT],
      TEXT: [class TEXT extends TEXT],
      ENUM: [class ENUM extends ENUM],
      JSON: [class JSONTYPE extends JSONTYPE],
      CITEXT: [class CITEXT extends CITEXT]
    },

    mssql: {
      BLOB: [class BLOB extends BLOB],
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      ENUM: [class ENUM extends ENUM],
      STRING: [class STRING extends STRING],
      UUID: [class UUID extends UUID],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      NOW: [class NOW extends NOW],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [class INTEGER extends INTEGER],
      BIGINT: [class BIGINT extends BIGINT],
      REAL: [class REAL extends REAL],
      FLOAT: [class FLOAT extends FLOAT],
      TEXT: [class TEXT extends TEXT]
    },
    db2: {
      BLOB: [class BLOB extends BLOB],
      BOOLEAN: [Function],
      ENUM: [class ENUM extends ENUM],
      STRING: [class STRING extends STRING],
      UUID: [class UUID extends UUID],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      NOW: [class NOW extends NOW],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [class INTEGER extends INTEGER],
      DOUBLE: [Function],
      'DOUBLE PRECISION': [Function],
      BIGINT: [class BIGINT extends BIGINT],
      REAL: [class REAL extends REAL],
      FLOAT: [class FLOAT extends FLOAT],
      TEXT: [class TEXT extends TEXT]
    },
    snowflake: {
      TEXT: [class TEXT extends TEXT],
      DATE: [class DATE extends DATE],
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    oracle: {
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      'DOUBLE PRECISION': [class DOUBLE extends DOUBLE],
      DOUBLE: [class DOUBLE extends DOUBLE],
      STRING: [class STRING extends STRING],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      MEDIUMINT: [class MEDIUMINT extends MEDIUMINT],
      BIGINT: [class BIGINT extends BIGINT],
      NUMBER: [class NUMBER extends NUMBER],
      INTEGER: [class INTEGER extends INTEGER],
      FLOAT: [class FLOAT extends FLOAT],
      UUID: [class UUID extends UUID],
      DATEONLY: [class DATEONLY extends DATEONLY],
      DATE: [class DATE extends DATE],
      NOW: [class NOW extends NOW],
      BLOB: [class BLOB extends BLOB],
      ENUM: [class ENUM extends ENUM],
      TEXT: [class TEXT extends TEXT],
      CHAR: [class CHAR extends CHAR],
      JSON: [class JSONTYPE extends JSONTYPE],
      REAL: [class REAL extends REAL],
      DECIMAL: [class DECIMAL extends DECIMAL]
    },
    Deferrable: {
      INITIALLY_DEFERRED: [class INITIALLY_DEFERRED extends ABSTRACT],
      INITIALLY_IMMEDIATE: [class INITIALLY_IMMEDIATE extends ABSTRACT],
      NOT: [class NOT extends ABSTRACT],
      SET_DEFERRED: [class SET_DEFERRED extends ABSTRACT],
      SET_IMMEDIATE: [class SET_IMMEDIATE extends ABSTRACT]
    },
    Association: <ref *7> [class Association] {
      BelongsTo: [Function],
      HasOne: [class HasOne extends Association],
      HasMany: [Function],
      BelongsToMany: [Function],
      default: [Circular *7],
      Association: [Circular *7]
    },
    useInflection: [Function: useInflection],
    _setupHooks: [Function: _setupHooks],
    runHooks: [AsyncFunction: runHooks],
    addHook: [Function: addHook],
    removeHook: [Function: removeHook],
    hasHook: [Function: hasHook],
    hasHooks: [Function: hasHook],
    beforeValidate: [Function (anonymous)],
    afterValidate: [Function (anonymous)],
    validationFailed: [Function (anonymous)],
    beforeCreate: [Function (anonymous)],
    afterCreate: [Function (anonymous)],
    beforeDestroy: [Function (anonymous)],
    afterDestroy: [Function (anonymous)],
    beforeRestore: [Function (anonymous)],
    afterRestore: [Function (anonymous)],
    beforeUpdate: [Function (anonymous)],
    afterUpdate: [Function (anonymous)],
    beforeSave: [Function (anonymous)],
    afterSave: [Function (anonymous)],
    beforeUpsert: [Function (anonymous)],
    afterUpsert: [Function (anonymous)],
    beforeBulkCreate: [Function (anonymous)],
    afterBulkCreate: [Function (anonymous)],
    beforeBulkDestroy: [Function (anonymous)],
    afterBulkDestroy: [Function (anonymous)],
    beforeBulkRestore: [Function (anonymous)],
    afterBulkRestore: [Function (anonymous)],
    beforeBulkUpdate: [Function (anonymous)],
    afterBulkUpdate: [Function (anonymous)],
    beforeFind: [Function (anonymous)],
    beforeFindAfterExpandIncludeAll: [Function (anonymous)],
    beforeFindAfterOptions: [Function (anonymous)],
    afterFind: [Function (anonymous)],
    beforeCount: [Function (anonymous)],
    beforeDefine: [Function (anonymous)],
    afterDefine: [Function (anonymous)],
    beforeInit: [Function (anonymous)],
    afterInit: [Function (anonymous)],
    beforeAssociate: [Function (anonymous)],
    afterAssociate: [Function (anonymous)],
    beforeConnect: [Function (anonymous)],
    afterConnect: [Function (anonymous)],
    beforeDisconnect: [Function (anonymous)],
    afterDisconnect: [Function (anonymous)],
    beforePoolAcquire: [Function (anonymous)],
    afterPoolAcquire: [Function (anonymous)],
    beforeSync: [Function (anonymous)],
    afterSync: [Function (anonymous)],
    beforeBulkSync: [Function (anonymous)],
    afterBulkSync: [Function (anonymous)],
    beforeQuery: [Function (anonymous)],
    afterQuery: [Function (anonymous)],
    Error: [class BaseError extends Error],
    AccessDeniedError: [class AccessDeniedError extends ConnectionError],
    AggregateError: [class AggregateError extends BaseError],
    AssociationError: [class AssociationError extends BaseError],
    AsyncQueueError: [class AsyncQueueError extends BaseError],
    BaseError: [class BaseError extends Error],
    BulkRecordError: [class BulkRecordError extends BaseError],
    ConnectionAcquireTimeoutError: [class ConnectionAcquireTimeoutError extends ConnectionError],
    ConnectionError: [class ConnectionError extends BaseError],
    ConnectionRefusedError: [class ConnectionRefusedError extends ConnectionError],
    ConnectionTimedOutError: [class ConnectionTimedOutError extends ConnectionError],
    DatabaseError: [class DatabaseError extends BaseError],
    EagerLoadingError: [class EagerLoadingError extends BaseError],
    EmptyResultError: [class EmptyResultError extends BaseError],
    ExclusionConstraintError: [class ExclusionConstraintError extends DatabaseError],
    ForeignKeyConstraintError: [class ForeignKeyConstraintError extends DatabaseError],
    HostNotFoundError: [class HostNotFoundError extends ConnectionError],
    HostNotReachableError: [class HostNotReachableError extends ConnectionError],
    InstanceError: [class InstanceError extends BaseError],
    InvalidConnectionError: [class InvalidConnectionError extends ConnectionError],
    OptimisticLockError: [class OptimisticLockError extends BaseError],
    QueryError: [class QueryError extends BaseError],
    SequelizeScopeError: [class SequelizeScopeError extends BaseError],
    TimeoutError: [class TimeoutError extends DatabaseError],
    UniqueConstraintError: [class UniqueConstraintError extends ValidationError],
    UnknownConstraintError: [class UnknownConstraintError extends DatabaseError],
    ValidationError: [class ValidationError extends BaseError],
    ValidationErrorItem: [class ValidationErrorItem] {
      TypeStringMap: [Object],
      Origins: [Object]
    },
    ValidationErrorItemOrigin: { CORE: 'CORE', DB: 'DB', FUNCTION: 'FUNCTION' },
    ValidationErrorItemType: {
      'notnull violation': 'CORE',
      'string violation': 'CORE',
      'unique violation': 'DB',
      'validation error': 'FUNCTION'
    },
    Sequelize: [Circular *8],
    default: [Circular *8]
  },
  testConnection: [AsyncFunction (anonymous)],
  syncDatabase: [AsyncFunction (anonymous)]
}
DB object in authMiddleware before calling authService.getMe: <ref *1> Sequelize {

  options: {
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: 'postgres',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    standardConformingStrings: true,
    logging: false,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    hooks: {},
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '14.19.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    username: 'postgres',
    password: 'b74996144735db08d6e091f460df4184',
    database: 'feedeliza',
    port: '5432'
  },
  config: {
    database: 'feedeliza',
    username: 'postgres',
    password: 'b74996144735db08d6e091f460df4184',
    host: 'postgres',
    port: '5432',
    pool: {},
    protocol: 'tcp',
    native: false,
    ssl: undefined,
    replication: false,
    dialectModule: null,
    dialectModulePath: null,
    keepDefaultTimezone: undefined,
    dialectOptions: undefined
  },
  dialect: <ref *2> PostgresDialect {
    sequelize: [Circular *1],
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [Circular *2],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    },
    queryGenerator: PostgresQueryGenerator {
      sequelize: [Circular *1],
      options: [Object],
      dialect: 'postgres',
      _dialect: [Circular *2],
      _quoteIdentifier: [Function: quoteIdentifier],
      quoteIdentifier: [Function (anonymous)],
      typeValidation: undefined
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    }
  },
  queryInterface: PostgresQueryInterface {
    sequelize: [Circular *1],
    queryGenerator: PostgresQueryGenerator {
      sequelize: [Circular *1],
      options: [Object],
      dialect: 'postgres',
      _dialect: [PostgresDialect],
      _quoteIdentifier: [Function: quoteIdentifier],
      quoteIdentifier: [Function (anonymous)],
      typeValidation: undefined
    }
  },
  models: {
    Action: Action,
    Addon: Addon,
    Answer: Answer,
    AuditLog: AuditLog,
    CashRegisterCategory: CashRegisterCategory,
    CashRegisterMovement: CashRegisterMovement,
    CashRegisterSession: CashRegisterSession,
    Category: Category,
    Checkin: Checkin,
    Coupon: Coupon,
    Customer: Customer,
    Feature: Feature,
    Feedback: Feedback,
    FinancialCategory: FinancialCategory,
    FinancialTransaction: FinancialTransaction,
    Ingredient: Ingredient,
    LossRecord: LossRecord,
    Module: Module,
    NpsCriterion: NpsCriterion,
    Order: Order,
    PaymentMethod: PaymentMethod,
    PrintedLabel: PrintedLabel,
    Product: Product,
    ProductionRecord: ProductionRecord,
    ProductionRecordItem: ProductionRecordItem,
    QRCode: QRCode,
    Question: Question,
    RecipeIngredient: RecipeIngredient,
    Restaurant: Restaurant,
    RestaurantEntitlement: RestaurantEntitlement,
    Reward: Reward,
    Role: Role,
    RolePermission: RolePermission,
    Stock: Stock,
    StockCount: StockCount,
    StockCountItem: StockCountItem,
    StockMovement: StockMovement,
    Submodule: Submodule,
    Supplier: Supplier,
    Survey: Survey,
    SurveyResponse: SurveyResponse,
    Table: Table,
    TableSession: TableSession,
    TechnicalSpecification: TechnicalSpecification,
    User: User,
    UserPermissionOverride: UserPermissionOverride,
    UserRestaurant: UserRestaurant,
    UserRole: UserRole,
    WaiterCall: WaiterCall,
    WhatsappMessage: WhatsappMessage
  },
  modelManager: ModelManager {
    models: [
      Action,                 Addon,                  Answer,
      AuditLog,               CashRegisterCategory,   CashRegisterMovement,
      CashRegisterSession,    Category,               Checkin,
      Coupon,                 Customer,               Feature,
      Feedback,               FinancialCategory,      FinancialTransaction,
      Ingredient,             LossRecord,             Module,
      NpsCriterion,           Order,                  PaymentMethod,
      PrintedLabel,           Product,                ProductionRecord,
      ProductionRecordItem,   QRCode,                 Question,
      RecipeIngredient,       Restaurant,             RestaurantEntitlement,
      Reward,                 Role,                   RolePermission,
      Stock,                  StockCount,             StockCountItem,
      StockMovement,          Submodule,              Supplier,
      Survey,                 SurveyResponse,         Table,
      TableSession,           TechnicalSpecification, User,
      UserPermissionOverride, UserRestaurant,         UserRole,
      WaiterCall,             WhatsappMessage
    ],
    sequelize: [Circular *1]
  },
  connectionManager: <ref *3> ConnectionManager {
    sequelize: [Circular *1],
    config: {
      database: 'feedeliza',
      username: 'postgres',
      password: 'b74996144735db08d6e091f460df4184',
      host: 'postgres',
      port: '5432',
      pool: [Object],
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined,
      user: 'postgres'
    },
    dialect: <ref *2> PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [Circular *3],
      queryGenerator: [PostgresQueryGenerator],
DEBUG: authMiddleware - error: TypeError: Cannot read properties of undefined (reading 'findByPk')
    at Object.getMe (/app/src/domains/auth/auth.service.js:103:32)
    at authMiddleware (/app/src/middleware/authMiddleware.js:26:44)
    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/app/node_modules/express/lib/router/index.js:328:13)
    at /app/node_modules/express/lib/router/index.js:286:9
    at Function.process_params (/app/node_modules/express/lib/router/index.js:346:12)
    at next (/app/node_modules/express/lib/router/index.js:280:10)
    at Function.handle (/app/node_modules/express/lib/router/index.js:175:3)
    at router (/app/node_modules/express/lib/router/index.js:47:12)
    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)
      queryInterface: [PostgresQueryInterface]
    },
    versionPromise: null,
    dialectName: 'postgres',
    pool: Pool {
      log: false,
      idleTimeoutMillis: 10000,
      acquireTimeoutMillis: 60000,
      reapIntervalMillis: 1000,
      maxUsesPerResource: Infinity,
      _factory: [Object],
      _count: 1,
      _draining: false,
      _pendingAcquires: [],
      _inUseObjects: [],
      _availableObjects: [Array],
      _removeIdleScheduled: true,
      _removeIdleTimer: Timeout {
        _idleTimeout: 1000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 16502,
        _onTimeout: [Function (anonymous)],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: true,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 121,
        [Symbol(triggerId)]: 0
      }
    },
    lib: PG {
      defaults: [Object],
      Client: [Function],
      Query: [class Query extends EventEmitter],
      Pool: [class BoundPool extends Pool],
      _pools: [],
      Connection: [class Connection extends EventEmitter],
      types: [Object],
      DatabaseError: [class DatabaseError extends Error],
      TypeOverrides: [Function: TypeOverrides],
      escapeIdentifier: [Function: escapeIdentifier],
      escapeLiteral: [Function: escapeLiteral],
      Result: [class Result],
      utils: [Object]
    },
    nameOidMap: {
      bool: [Object],
      bytea: [Object],
      char: [Object],
      name: [Object],
      int8: [Object],
      int2: [Object],
      int2vector: [Object],
      int4: [Object],
      regproc: [Object],
      text: [Object],
      oid: [Object],
      tid: [Object],
      xid: [Object],
      cid: [Object],
      oidvector: [Object],
      json: [Object],
      xml: [Object],
      pg_node_tree: [Object],
      pg_ndistinct: [Object],
      pg_dependencies: [Object],
      pg_mcv_list: [Object],
      xid8: [Object],
      point: [Object],
      lseg: [Object],
      path: [Object],
      box: [Object],
      polygon: [Object],
      line: [Object],
      float4: [Object],
      float8: [Object],
      circle: [Object],
      money: [Object],
      macaddr: [Object],
      inet: [Object],
      cidr: [Object],
      macaddr8: [Object],
      aclitem: [Object],
      bpchar: [Object],
      varchar: [Object],
      date: [Object],
      time: [Object],
      timestamp: [Object],
      timestamptz: [Object],
      interval: [Object],
      timetz: [Object],
      bit: [Object],
      varbit: [Object],
      numeric: [Object],
      refcursor: [Object],
      regprocedure: [Object],
      regoper: [Object],
      regoperator: [Object],
      regclass: [Object],
      regcollation: [Object],
      regtype: [Object],
      regrole: [Object],
      regnamespace: [Object],
      uuid: [Object],
      pg_lsn: [Object],
      tsvector: [Object],
      gtsvector: [Object],
      tsquery: [Object],
      regconfig: [Object],
      regdictionary: [Object],
      jsonb: [Object],
      jsonpath: [Object],
      txid_snapshot: [Object],
      pg_snapshot: [Object],
      pg_brin_bloom_summary: [Object],
      pg_brin_minmax_multi_summary: [Object],
      _bool: [Object],
      _bytea: [Object],
      _char: [Object],
      _name: [Object],
      _int8: [Object],
      _int2: [Object],
      _int2vector: [Object],
      _int4: [Object],
      _regproc: [Object],
      _text: [Object],
      _oid: [Object],
      _tid: [Object],
      _xid: [Object],
      _cid: [Object],
      _oidvector: [Object],
      _pg_type: [Object],
      _pg_attribute: [Object],
      _pg_proc: [Object],
      _pg_class: [Object],
      _json: [Object],
      _xml: [Object],
      _xid8: [Object],
      _point: [Object],
      _lseg: [Object],
      _path: [Object],
      _box: [Object],
      _polygon: [Object],
      _line: [Object],
      _float4: [Object],
      _float8: [Object],
      _circle: [Object],
      _money: [Object],
      _macaddr: [Object],
      _inet: [Object],
      _cidr: [Object],
      _macaddr8: [Object],
      _aclitem: [Object],
      _bpchar: [Object],
      _varchar: [Object],
      _date: [Object],
      _time: [Object],
      _timestamp: [Object],
      _timestamptz: [Object],
      _interval: [Object],
      _timetz: [Object],
      _bit: [Object],
      _varbit: [Object],
      _numeric: [Object],
      _refcursor: [Object],
      _regprocedure: [Object],
      _regoper: [Object],
      _regoperator: [Object],
      _regclass: [Object],
      _regcollation: [Object],
      _regtype: [Object],
      _regrole: [Object],
      _regnamespace: [Object],
      _uuid: [Object],
      _pg_lsn: [Object],
      _tsvector: [Object],
      _gtsvector: [Object],
      _tsquery: [Object],
      _regconfig: [Object],
      _regdictionary: [Object],
      _jsonb: [Object],
      _jsonpath: [Object],
      _txid_snapshot: [Object],
      _pg_snapshot: [Object],
      _int4range: [Object],
      _numrange: [Object],
      _tsrange: [Object],
      _tstzrange: [Object],
      _daterange: [Object],
      _int8range: [Object],
      _int4multirange: [Object],
      _nummultirange: [Object],
      _tsmultirange: [Object],
      _tstzmultirange: [Object],
      _datemultirange: [Object],
      _int8multirange: [Object],
      _cstring: [Object],
      _pg_attrdef: [Object],
      _pg_constraint: [Object],
      _pg_inherits: [Object],
      _pg_index: [Object],
      _pg_operator: [Object],
      _pg_opfamily: [Object],
      _pg_opclass: [Object],
      _pg_am: [Object],
      _pg_amop: [Object],
      _pg_amproc: [Object],
      _pg_language: [Object],
      _pg_largeobject_metadata: [Object],
      _pg_largeobject: [Object],
      _pg_aggregate: [Object],
      _pg_statistic: [Object],
      _pg_statistic_ext: [Object],
      _pg_statistic_ext_data: [Object],
      _pg_rewrite: [Object],
      _pg_trigger: [Object],
      _pg_event_trigger: [Object],
      _pg_description: [Object],
      _pg_cast: [Object],
      _pg_enum: [Object],
      _pg_namespace: [Object],
      _pg_conversion: [Object],
      _pg_depend: [Object],
      _pg_database: [Object],
      _pg_db_role_setting: [Object],
      _pg_tablespace: [Object],
      _pg_authid: [Object],
      _pg_auth_members: [Object],
      _pg_shdepend: [Object],
      _pg_shdescription: [Object],
      _pg_ts_config: [Object],
      _pg_ts_config_map: [Object],
      _pg_ts_dict: [Object],
      _pg_ts_parser: [Object],
      _pg_ts_template: [Object],
      _pg_extension: [Object],
      _pg_foreign_data_wrapper: [Object],
      _pg_foreign_server: [Object],
      _pg_user_mapping: [Object],
      _pg_foreign_table: [Object],
      _pg_policy: [Object],
      _pg_replication_origin: [Object],
      _pg_default_acl: [Object],
      _pg_init_privs: [Object],
      _pg_seclabel: [Object],
      _pg_shseclabel: [Object],
      _pg_collation: [Object],
      _pg_partitioned_table: [Object],
      _pg_range: [Object],
      _pg_transform: [Object],
      _pg_sequence: [Object],
      _pg_publication: [Object],
      _pg_publication_rel: [Object],
      _pg_subscription: [Object],
      _pg_subscription_rel: [Object],
      _pg_roles: [Object],
      _pg_shadow: [Object],
      _pg_group: [Object],
      _pg_user: [Object],
      _pg_policies: [Object],
      _pg_rules: [Object],
      _pg_views: [Object],
      _pg_tables: [Object],
      _pg_matviews: [Object],
      _pg_indexes: [Object],
      _pg_sequences: [Object],
      _pg_stats: [Object],
      _pg_stats_ext: [Object],
      _pg_stats_ext_exprs: [Object],
      _pg_publication_tables: [Object],
      _pg_locks: [Object],
      _pg_cursors: [Object],
      _pg_available_extensions: [Object],
      _pg_available_extension_versions: [Object],
      _pg_prepared_xacts: [Object],
      _pg_prepared_statements: [Object],
      _pg_seclabels: [Object],
      _pg_settings: [Object],
      _pg_file_settings: [Object],
      _pg_hba_file_rules: [Object],
      _pg_timezone_abbrevs: [Object],
      _pg_timezone_names: [Object],
      _pg_config: [Object],
      _pg_shmem_allocations: [Object],
      _pg_backend_memory_contexts: [Object],
      _pg_stat_all_tables: [Object],
      _pg_stat_xact_all_tables: [Object],
      _pg_stat_sys_tables: [Object],
      _pg_stat_xact_sys_tables: [Object],
      _pg_stat_user_tables: [Object],
      _pg_stat_xact_user_tables: [Object],
      _pg_statio_all_tables: [Object],
      _pg_statio_sys_tables: [Object],
      _pg_statio_user_tables: [Object],
      _pg_stat_all_indexes: [Object],
      _pg_stat_sys_indexes: [Object],
      _pg_stat_user_indexes: [Object],
      _pg_statio_all_indexes: [Object],
      _pg_statio_sys_indexes: [Object],
      _pg_statio_user_indexes: [Object],
      _pg_statio_all_sequences: [Object],
      _pg_statio_sys_sequences: [Object],
      _pg_statio_user_sequences: [Object],
      _pg_stat_activity: [Object],
      _pg_stat_replication: [Object],
      _pg_stat_slru: [Object],
      _pg_stat_wal_receiver: [Object],
      _pg_stat_subscription: [Object],
      _pg_stat_ssl: [Object],
      _pg_stat_gssapi: [Object],
      _pg_replication_slots: [Object],
      _pg_stat_replication_slots: [Object],
      _pg_stat_database: [Object],
      _pg_stat_database_conflicts: [Object],
      _pg_stat_user_functions: [Object],
      _pg_stat_xact_user_functions: [Object],
      _pg_stat_archiver: [Object],
      _pg_stat_bgwriter: [Object],
      _pg_stat_wal: [Object],
      _pg_stat_progress_analyze: [Object],
      _pg_stat_progress_vacuum: [Object],
      _pg_stat_progress_cluster: [Object],
      _pg_stat_progress_create_index: [Object],
      _pg_stat_progress_basebackup: [Object],
      _pg_stat_progress_copy: [Object],
      _pg_user_mappings: [Object],
      _pg_replication_origin_status: [Object],
      _cardinal_number: [Object],
      _character_data: [Object],
      _sql_identifier: [Object],
      _information_schema_catalog_name: [Object],
      _time_stamp: [Object],
      _yes_or_no: [Object],
      _applicable_roles: [Object],
      _administrable_role_authorizations: [Object],
      _attributes: [Object],
      _character_sets: [Object],
      _check_constraint_routine_usage: [Object],
      _check_constraints: [Object],
      _collations: [Object],
      _collation_character_set_applicability: [Object],
      _column_column_usage: [Object],
      _column_domain_usage: [Object],
      _column_privileges: [Object],
      _column_udt_usage: [Object],
      _columns: [Object],
      _constraint_column_usage: [Object],
      _constraint_table_usage: [Object],
      _domain_constraints: [Object],
      _domain_udt_usage: [Object],
      _domains: [Object],
      _enabled_roles: [Object],
      _key_column_usage: [Object],
      _parameters: [Object],
      _referential_constraints: [Object],
      _role_column_grants: [Object],
      _routine_column_usage: [Object],
      _routine_privileges: [Object],
      _role_routine_grants: [Object],
      _routine_routine_usage: [Object],
      _routine_sequence_usage: [Object],
      _routine_table_usage: [Object],
      _routines: [Object],
      _schemata: [Object],
      _sequences: [Object],
      _sql_features: [Object],
      _sql_implementation_info: [Object],
      _sql_parts: [Object],
      _sql_sizing: [Object],
      _table_constraints: [Object],
      _table_privileges: [Object],
      _role_table_grants: [Object],
      _tables: [Object],
      _transforms: [Object],
      _triggered_update_columns: [Object],
      _triggers: [Object],
      _udt_privileges: [Object],
      _role_udt_grants: [Object],
      _usage_privileges: [Object],
      _role_usage_grants: [Object],
      _user_defined_types: [Object],
      _view_column_usage: [Object],
      _view_routine_usage: [Object],
      _view_table_usage: [Object],
      _views: [Object],
      _data_type_privileges: [Object],
      _element_types: [Object],
      __pg_foreign_table_columns: [Object],
      _column_options: [Object],
      __pg_foreign_data_wrappers: [Object],
      _foreign_data_wrapper_options: [Object],
      _foreign_data_wrappers: [Object],
      __pg_foreign_servers: [Object],
      _foreign_server_options: [Object],
      _foreign_servers: [Object],
      __pg_foreign_tables: [Object],
      _foreign_table_options: [Object],
      _foreign_tables: [Object],
      __pg_user_mappings: [Object],
      _user_mapping_options: [Object],
      _user_mappings: [Object],
      _SequelizeMeta: [Object],
      _users: [Object],
      _restaurants: [Object],
      _user_restaurants: [Object],
      _modules: [Object],
      _submodules: [Object],
      _features: [Object],
      _actions: [Object],
      _entitlement_status: [Object],
      _entitlement_entity: [Object],
      _restaurant_entitlements: [Object],
      _roles: [Object],
      _role_permissions: [Object],
      _user_roles: [Object],
      _user_permission_overrides: [Object],
      _audit_logs: [Object],
      _categories: [Object],
      _suppliers: [Object],
      _ingredients: [Object],
      _products: [Object],
      _stocks: [Object],
      _stock_movements: [Object],
      _technical_specifications: [Object],
      _recipe_ingredients: [Object],
      _printed_labels: [Object],
      _loss_records: [Object],
      _stock_counts: [Object],
      _stock_count_items: [Object],
      _production_records: [Object],
      _production_record_items: [Object],
      _customers: [Object],
      _checkins: [Object],
      _rewards: [Object],
      _nps_criterions: [Object],
      _surveys: [Object],
      _questions: [Object],
      _survey_responses: [Object],
      _answers: [Object],
      _feedbacks: [Object],
      _qrcodes: [Object],
      _table_sessions: [Object],
      _orders: [Object],
      _coupons: [Object],
      _addons: [Object],
      _waiter_calls: [Object],
      _whatsapp_messages: [Object],
      _payment_methods: [Object],
      _financial_categories: [Object],
      _financial_transactions: [Object],
      _cash_register_categories: [Object],
      _cash_register_sessions: [Object],
      _cash_register_movements: [Object]
    },
    enumOids: { oids: [Array], arrayOids: [Array] },
    oidParserMap: Map(24) {
      1700 => [Function: parser],
      1231 => [Function (anonymous)],
      23 => [Function: parser],
      1007 => [Function (anonymous)],
      16 => [Function: parser],
      1000 => [Function (anonymous)],
      1082 => [Function: parser],
      1182 => [Function (anonymous)],
      3926 => [Function (anonymous)],
      3927 => [Function (anonymous)],
      3904 => [Function (anonymous)],
      3905 => [Function (anonymous)],
      3912 => [Function (anonymous)],
      3913 => [Function (anonymous)],
      3908 => [Function (anonymous)],
      3909 => [Function (anonymous)],
      3910 => [Function (anonymous)],
      3911 => [Function (anonymous)],
      3906 => [Function (anonymous)],
      3907 => [Function (anonymous)],
      33926 => [Function: parser],
      33936 => [Function: parser],
      33925 => [Function (anonymous)],
      33935 => [Function (anonymous)]
    }
  }
}
TypeError: Cannot read properties of undefined (reading 'findByPk')
    at Object.getMe (/app/src/domains/auth/auth.service.js:103:32)
    at authMiddleware (/app/src/middleware/authMiddleware.js:26:44)
    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/app/node_modules/express/lib/router/index.js:328:13)
    at /app/node_modules/express/lib/router/index.js:286:9
    at Function.process_params (/app/node_modules/express/lib/router/index.js:346:12)
    at next (/app/node_modules/express/lib/router/index.js:280:10)
    at Function.handle (/app/node_modules/express/lib/router/index.js:175:3)
    at router (/app/node_modules/express/lib/router/index.js:47:12)
    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)
DB object in authMiddleware before calling authService.getMe: {
  Action: Action,
  Addon: Addon,
  Answer: Answer,
  AuditLog: AuditLog,
  CashRegisterCategory: CashRegisterCategory,
  CashRegisterMovement: CashRegisterMovement,
  CashRegisterSession: CashRegisterSession,
  Category: Category,
  Checkin: Checkin,
  Coupon: Coupon,
  Customer: Customer,
  Feature: Feature,
  Feedback: Feedback,
  FinancialCategory: FinancialCategory,
  FinancialTransaction: FinancialTransaction,
  Ingredient: Ingredient,
  LossRecord: LossRecord,
  Module: Module,
  NpsCriterion: NpsCriterion,
  Order: Order,
  PaymentMethod: PaymentMethod,
  PrintedLabel: PrintedLabel,
  Product: Product,
  ProductionRecord: ProductionRecord,
  ProductionRecordItem: ProductionRecordItem,
  QRCode: QRCode,
  Question: Question,
  RecipeIngredient: RecipeIngredient,
  Restaurant: Restaurant,
  RestaurantEntitlement: RestaurantEntitlement,
  Reward: Reward,
  Role: Role,
  RolePermission: RolePermission,
  Stock: Stock,
  StockCount: StockCount,
  StockCountItem: StockCountItem,
  StockMovement: StockMovement,
  Submodule: Submodule,
  Supplier: Supplier,
  Survey: Survey,
  SurveyResponse: SurveyResponse,
  Table: Table,
  TableSession: TableSession,
  TechnicalSpecification: TechnicalSpecification,
  User: User,
  UserPermissionOverride: UserPermissionOverride,
  UserRestaurant: UserRestaurant,
  UserRole: UserRole,
  WaiterCall: WaiterCall,
  WhatsappMessage: WhatsappMessage,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'postgres',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: false,
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.19.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      username: 'postgres',
      password: 'b74996144735db08d6e091f460df4184',
      database: 'feedeliza',
      port: '5432'
    },
    config: {
      database: 'feedeliza',
      username: 'postgres',
      password: 'b74996144735db08d6e091f460df4184',
      host: 'postgres',
      port: '5432',
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      Action: Action,
      Addon: Addon,
      Answer: Answer,
      AuditLog: AuditLog,
      CashRegisterCategory: CashRegisterCategory,
      CashRegisterMovement: CashRegisterMovement,
      CashRegisterSession: CashRegisterSession,
      Category: Category,
      Checkin: Checkin,
      Coupon: Coupon,
      Customer: Customer,
      Feature: Feature,
      Feedback: Feedback,
      FinancialCategory: FinancialCategory,
      FinancialTransaction: FinancialTransaction,
      Ingredient: Ingredient,
      LossRecord: LossRecord,
      Module: Module,
      NpsCriterion: NpsCriterion,
      Order: Order,
      PaymentMethod: PaymentMethod,
      PrintedLabel: PrintedLabel,
      Product: Product,
      ProductionRecord: ProductionRecord,
      ProductionRecordItem: ProductionRecordItem,
      QRCode: QRCode,
      Question: Question,
      RecipeIngredient: RecipeIngredient,
      Restaurant: Restaurant,
      RestaurantEntitlement: RestaurantEntitlement,
      Reward: Reward,
      Role: Role,
      RolePermission: RolePermission,
      Stock: Stock,
      StockCount: StockCount,
      StockCountItem: StockCountItem,
      StockMovement: StockMovement,
      Submodule: Submodule,
      Supplier: Supplier,
      Survey: Survey,
      SurveyResponse: SurveyResponse,
      Table: Table,
      TableSession: TableSession,
      TechnicalSpecification: TechnicalSpecification,
      User: User,
      UserPermissionOverride: UserPermissionOverride,
      UserRestaurant: UserRestaurant,
      UserRole: UserRole,
      WaiterCall: WaiterCall,
      WhatsappMessage: WhatsappMessage
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  Sequelize: <ref *8> [class Sequelize] {
    version: [Getter],
    options: { hooks: {} },

    Utils: {
      classToInvokable: [Function: classToInvokable],
      joinSQLFragments: [Function: joinSQLFragments],
      useInflection: [Function: useInflection],
      camelizeIf: [Function: camelizeIf],
      underscoredIf: [Function: underscoredIf],
      isPrimitive: [Function: isPrimitive],
      mergeDefaults: [Function: mergeDefaults],
      merge: [Function: merge],
      spliceStr: [Function: spliceStr],
      camelize: [Function: camelize],
      underscore: [Function: underscore],
      singularize: [Function: singularize],
      pluralize: [Function: pluralize],
      format: [Function: format],
      formatNamedParameters: [Function: formatNamedParameters],
      cloneDeep: [Function: cloneDeep],
      mapFinderOptions: [Function: mapFinderOptions],
      mapOptionFieldNames: [Function: mapOptionFieldNames],
      mapWhereFieldNames: [Function: mapWhereFieldNames],
      mapValueFieldNames: [Function: mapValueFieldNames],
      isColString: [Function: isColString],
      canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
      combineTableNames: [Function: combineTableNames],
      toDefaultValue: [Function: toDefaultValue],
      defaultValueSchemable: [Function: defaultValueSchemable],
      removeNullValuesFromHash: [Function: removeNullValuesFromHash],
      now: [Function: now],
      TICK_CHAR: '`',
      addTicks: [Function: addTicks],
      removeTicks: [Function: removeTicks],
      flattenObjectDeep: [Function: flattenObjectDeep],
      SequelizeMethod: [class SequelizeMethod],
      Fn: [class Fn extends SequelizeMethod],
      Col: [class Col extends SequelizeMethod],
      Cast: [class Cast extends SequelizeMethod],
      Literal: [class Literal extends SequelizeMethod],
      Json: [class Json extends SequelizeMethod],
      Where: [class Where extends SequelizeMethod],
      getOperators: [Function: getOperators],
      getComplexKeys: [Function: getComplexKeys],
      getComplexSize: [Function: getComplexSize],
      isWhereEmpty: [Function: isWhereEmpty],
      generateEnumName: [Function: generateEnumName],
      camelizeObjectKeys: [Function: camelizeObjectKeys],
      defaults: [Function: defaults],
      nameIndex: [Function: nameIndex],
      intersects: [Function: intersects],
      safeStringifyJson: [Function: safeStringifyJson]
    },

{
      eq: Symbol(eq),
      ne: Symbol(ne),
      gte: Symbol(gte),
      gt: Symbol(gt),
      lte: Symbol(lte),
      lt: Symbol(lt),
      not: Symbol(not),
      is: Symbol(is),
      in: Symbol(in),
      notIn: Symbol(notIn),
      like: Symbol(like),
      notLike: Symbol(notLike),
      iLike: Symbol(iLike),
      notILike: Symbol(notILike),
      startsWith: Symbol(startsWith),
      endsWith: Symbol(endsWith),
      substring: Symbol(substring),
      regexp: Symbol(regexp),
      notRegexp: Symbol(notRegexp),
      iRegexp: Symbol(iRegexp),
      notIRegexp: Symbol(notIRegexp),
      between: Symbol(between),
      notBetween: Symbol(notBetween),
      overlap: Symbol(overlap),
      contains: Symbol(contains),
      contained: Symbol(contained),
      adjacent: Symbol(adjacent),
      strictLeft: Symbol(strictLeft),
      strictRight: Symbol(strictRight),
      noExtendRight: Symbol(noExtendRight),
      noExtendLeft: Symbol(noExtendLeft),
      and: Symbol(and),
      or: Symbol(or),
      any: Symbol(any),
      all: Symbol(all),
      values: Symbol(values),
      col: Symbol(col),
      placeholder: Symbol(placeholder),
      join: Symbol(join),
      match: Symbol(match)
    },
    TableHints: {
      NOLOCK: 'NOLOCK',
      READUNCOMMITTED: 'READUNCOMMITTED',
      UPDLOCK: 'UPDLOCK',
      REPEATABLEREAD: 'REPEATABLEREAD',
      SERIALIZABLE: 'SERIALIZABLE',
      READCOMMITTED: 'READCOMMITTED',
      TABLOCK: 'TABLOCK',
      TABLOCKX: 'TABLOCKX',
      PAGLOCK: 'PAGLOCK',
      ROWLOCK: 'ROWLOCK',
      NOWAIT: 'NOWAIT',
      READPAST: 'READPAST',
      XLOCK: 'XLOCK',
      SNAPSHOT: 'SNAPSHOT',
      NOEXPAND: 'NOEXPAND'
    },
    IndexHints: { USE: 'USE', FORCE: 'FORCE', IGNORE: 'IGNORE' },
    Transaction: <ref *2> [class Transaction] {
      Transaction: [Circular *2],
      default: [Circular *2]
    },
    QueryTypes: {
      SELECT: 'SELECT',
      INSERT: 'INSERT',
      UPDATE: 'UPDATE',
      BULKUPDATE: 'BULKUPDATE',
      BULKDELETE: 'BULKDELETE',
      DELETE: 'DELETE',
      UPSERT: 'UPSERT',
      VERSION: 'VERSION',
      SHOWTABLES: 'SHOWTABLES',
      SHOWINDEXES: 'SHOWINDEXES',
      DESCRIBE: 'DESCRIBE',
      RAW: 'RAW',
      FOREIGNKEYS: 'FOREIGNKEYS',
      SHOWCONSTRAINTS: 'SHOWCONSTRAINTS'
    },
    Validator: <ref *3> {
      version: '13.12.0',
      toDate: [Function],
      toFloat: [Function],
      toInt: [Function],
      toBoolean: [Function],
      equals: [Function],
      contains: [Function: contains],
      matches: [Function],
      isEmail: [Function],
      isURL: [Function],
      isMACAddress: [Function],
      isIP: [Function],
      isIPRange: [Function],
      isFQDN: [Function],
      isBoolean: [Function],
      isIBAN: [Function: isIBAN],
      isBIC: [Function],
      isAbaRouting: [Function],
      isAlpha: [Function: isAlpha],
      isAlphaLocales: [Array],
      isAlphanumeric: [Function: isAlphanumeric],
      isAlphanumericLocales: [Array],
      isNumeric: [Function],
      isPassportNumber: [Function],
      isPort: [Function],
      isLowercase: [Function],
      isUppercase: [Function],
      isAscii: [Function],
      isFullWidth: [Function: isFullWidth],
      isHalfWidth: [Function: isHalfWidth],
      isVariableWidth: [Function],
      isMultibyte: [Function],
      isSemVer: [Function],
      isSurrogatePair: [Function],
      isInt: [Function],
      isIMEI: [Function],
      isFloat: [Function: isFloat],
      isFloatLocales: [Array],
      isDecimal: [Function: isDecimal],
      isHexadecimal: [Function],
      isOctal: [Function],
      isDivisibleBy: [Function],
      isHexColor: [Function],
      isRgbColor: [Function],
      isHSL: [Function],
      isISRC: [Function],
      isMD5: [Function],
      isHash: [Function],
      isJWT: [Function],
      isJSON: [Function],
      isEmpty: [Function],
      isLength: [Function],
      isLocale: [Function],
      isByteLength: [Function],
      isUUID: [Function],
      isMongoId: [Function],
      isAfter: [Function],
      isBefore: [Function],
      isIn: [Function],
      isLuhnNumber: [Function],
      isCreditCard: [Function],
      isIdentityCard: [Function],
      isEAN: [Function],
      isISIN: [Function],
      isISBN: [Function],
      isISSN: [Function],
      isMobilePhone: [Function: isMobilePhone],
      isMobilePhoneLocales: [Array],
      isPostalCode: [Function: isPostalCode],
      isPostalCodeLocales: [Array],
      isEthereumAddress: [Function],
      isCurrency: [Function],
      isBtcAddress: [Function],
      isISO6346: [Function: isISO6346],
      isFreightContainerID: [Function: isISO6346],
      isISO6391: [Function],
      isISO8601: [Function],
      isRFC3339: [Function],
      isISO31661Alpha2: [Function: isISO31661Alpha2],
      isISO31661Alpha3: [Function],
      isISO4217: [Function: isISO4217],
      isBase32: [Function],
      isBase58: [Function],
      isBase64: [Function],
      isDataURI: [Function],
      isMagnetURI: [Function],
      isMailtoURI: [Function],
      isMimeType: [Function],
      isLatLong: [Function],
      ltrim: [Function],
      rtrim: [Function],
      trim: [Function],
      escape: [Function],
      unescape: [Function],
      stripLow: [Function],
      whitelist: [Function],
      blacklist: [Function],
      isWhitelisted: [Function],
      normalizeEmail: [Function],
      toString: [Function: toString],
      isSlug: [Function],
      isStrongPassword: [Function],
      isTaxID: [Function],
      isDate: [Function (anonymous)],
      isTime: [Function],
      isLicensePlate: [Function],
      isVAT: [Function: isVAT],
      ibanLocales: [Array],
      default: [Circular *3],
      isImmutable: [Function (anonymous)],
      notNull: [Function (anonymous)],
      extend: [Function: extend],
      notEmpty: [Function: notEmpty],
      len: [Function: len],
      isUrl: [Function: isUrl],
      isIPv6: [Function: isIPv6],
      isIPv4: [Function: isIPv4],
      notIn: [Function: notIn],
      regex: [Function: regex],
      notRegex: [Function: notRegex],
      min: [Function: min],
      max: [Function: max],
      not: [Function: not],
      notContains: [Function: notContains],
      is: [Function: is],
      isNull: [Function]
    },
    Model: Model,
    QueryInterface: [class QueryInterface],
    BelongsTo: <ref *4> [class BelongsTo extends Association] {
      BelongsTo: [Circular *4],
      default: [Circular *4]
    },
    HasOne: [class HasOne extends Association],
    HasMany: <ref *5> [class HasMany extends Association] {
      HasMany: [Circular *5],
      default: [Circular *5]
    },
    BelongsToMany: <ref *6> [class BelongsToMany extends Association] {
      BelongsToMany: [Circular *6],
      default: [Circular *6]
    },
    DataTypes: {
      ABSTRACT: [Function],
      STRING: [Function],
      CHAR: [Function],
      TEXT: [Function],
      NUMBER: [Function],
      TINYINT: [Function],
      SMALLINT: [Function],
      MEDIUMINT: [Function],
      INTEGER: [Function],
      BIGINT: [Function],
      FLOAT: [Function],
      TIME: [Function],
      DATE: [Function],
      DATEONLY: [Function],
      BOOLEAN: [Function],
      NOW: [Function],
      BLOB: [Function],
      DECIMAL: [Function],
      NUMERIC: [Function],
      UUID: [Function],
      UUIDV1: [Function],
      UUIDV4: [Function],
      HSTORE: [Function],
      JSON: [Function],
      JSONB: [Function],
      VIRTUAL: [Function],
      ARRAY: [Function],
      ENUM: [Function],
      RANGE: [Function],
      REAL: [Function],
      'DOUBLE PRECISION': [Function],
      DOUBLE: [Function],
      GEOMETRY: [Function],
      GEOGRAPHY: [Function],
      CIDR: [Function],
      INET: [Function],
      MACADDR: [Function],
      CITEXT: [Function],
      TSVECTOR: [Function],
      postgres: [Object],
      mysql: [Object],
      mariadb: [Object],
      sqlite: [Object],
      mssql: [Object],
      db2: [Object],
      snowflake: [Object],
      oracle: [Object]
    },
    ABSTRACT: [class ABSTRACT] { types: {}, key: 'ABSTRACT' },
    STRING: [class STRING extends ABSTRACT] { types: [Object], key: 'STRING' },
    CHAR: [class CHAR extends STRING] { types: [Object], key: 'CHAR' },
    TEXT: [class TEXT extends ABSTRACT] { types: [Object], key: 'TEXT' },
    NUMBER: [class NUMBER extends ABSTRACT] { types: {}, key: 'NUMBER' },
    TINYINT: [class TINYINT extends INTEGER] { types: [Object], key: 'TINYINT' },
    SMALLINT: [class SMALLINT extends INTEGER] {
      types: [Object],
      key: 'SMALLINT'
    },
    MEDIUMINT: [class MEDIUMINT extends INTEGER] {
      types: [Object],
      key: 'MEDIUMINT'
    },
    INTEGER: [class INTEGER extends NUMBER] { types: [Object], key: 'INTEGER' },
    BIGINT: [class BIGINT extends INTEGER] { types: [Object], key: 'BIGINT' },
    FLOAT: [class FLOAT extends NUMBER] { types: [Object], key: 'FLOAT' },
    TIME: [class TIME extends ABSTRACT] { types: [Object], key: 'TIME' },
    DATE: [class DATE extends ABSTRACT] { types: [Object], key: 'DATE' },
    DATEONLY: [class DATEONLY extends ABSTRACT] {
      types: [Object],
      key: 'DATEONLY'
    },
    BOOLEAN: [class BOOLEAN extends ABSTRACT] {
      parse: [Function: _sanitize],
      types: [Object],
      key: 'BOOLEAN'
    },
    NOW: [class NOW extends ABSTRACT] { types: {}, key: 'NOW' },
    BLOB: [class BLOB extends ABSTRACT] { types: [Object], key: 'BLOB' },
    DECIMAL: [class DECIMAL extends NUMBER] { types: [Object], key: 'DECIMAL' },
    NUMERIC: [class DECIMAL extends NUMBER] { types: [Object], key: 'DECIMAL' },
    UUID: [class UUID extends ABSTRACT] { types: [Object], key: 'UUID' },
    UUIDV1: [class UUIDV1 extends ABSTRACT] { types: {}, key: 'UUIDV1' },
    UUIDV4: [class UUIDV4 extends ABSTRACT] { types: {}, key: 'UUIDV4' },
    HSTORE: [class HSTORE extends ABSTRACT] { types: [Object], key: 'HSTORE' },
    JSON: [class JSONTYPE extends ABSTRACT] { types: [Object], key: 'JSON' },
    JSONB: [class JSONB extends JSONTYPE] { types: [Object], key: 'JSONB' },
    VIRTUAL: [class VIRTUAL extends ABSTRACT] { types: {}, key: 'VIRTUAL' },
    ARRAY: [class ARRAY extends ABSTRACT] { types: {}, key: 'ARRAY' },
    ENUM: [class ENUM extends ABSTRACT] { types: [Object], key: 'ENUM' },
    RANGE: [class RANGE extends ABSTRACT] { types: [Object], key: 'RANGE' },
    REAL: [class REAL extends NUMBER] { types: [Object], key: 'REAL' },
    'DOUBLE PRECISION': [class DOUBLE extends NUMBER] {
      types: [Object],
      key: 'DOUBLE PRECISION'
    },
    DOUBLE: [class DOUBLE extends NUMBER] {
      types: [Object],
      key: 'DOUBLE PRECISION'
    },
    GEOMETRY: [class GEOMETRY extends ABSTRACT] {
      types: [Object],
      key: 'GEOMETRY'
    },
    GEOGRAPHY: [class GEOGRAPHY extends ABSTRACT] {
      types: [Object],
      key: 'GEOGRAPHY'
    },
    CIDR: [class CIDR extends ABSTRACT] { types: [Object], key: 'CIDR' },
    INET: [class INET extends ABSTRACT] { types: [Object], key: 'INET' },
    MACADDR: [class MACADDR extends ABSTRACT] { types: [Object], key: 'MACADDR' },
    CITEXT: [class CITEXT extends ABSTRACT] { types: [Object], key: 'CITEXT' },
    TSVECTOR: [class TSVECTOR extends ABSTRACT] {
      types: [Object],
      key: 'TSVECTOR'
    },
    postgres: {
      DECIMAL: [class DECIMAL extends DECIMAL],
      BLOB: [class BLOB extends BLOB],
      STRING: [class STRING extends STRING],
      CHAR: [class CHAR extends CHAR],
      TEXT: [class TEXT extends TEXT],
      CITEXT: [class CITEXT extends CITEXT],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [Function],
      BIGINT: [class BIGINT extends BIGINT],
      BOOLEAN: [Function],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      REAL: [class REAL extends REAL],
      'DOUBLE PRECISION': [class DOUBLE extends DOUBLE],
      FLOAT: [class FLOAT extends FLOAT],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      GEOGRAPHY: [class GEOGRAPHY extends GEOGRAPHY],
      HSTORE: [class HSTORE extends HSTORE],
      RANGE: [class RANGE extends RANGE],
      ENUM: [class ENUM extends ENUM]
    },

    mysql: {
      ENUM: [class ENUM extends ENUM],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      DECIMAL: [class DECIMAL extends DECIMAL],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    mariadb: {
      ENUM: [class ENUM extends ENUM],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      DECIMAL: [class DECIMAL extends DECIMAL],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    sqlite: {
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      STRING: [class STRING extends STRING],
      CHAR: [class CHAR extends CHAR],
      NUMBER: [class NUMBER extends NUMBER],
      FLOAT: [Function],
      REAL: [Function],
      'DOUBLE PRECISION': [Function],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      MEDIUMINT: [class MEDIUMINT extends MEDIUMINT],
      INTEGER: [class INTEGER extends INTEGER],
      BIGINT: [class BIGINT extends BIGINT],
      TEXT: [class TEXT extends TEXT],
      ENUM: [class ENUM extends ENUM],
      JSON: [class JSONTYPE extends JSONTYPE],
      CITEXT: [class CITEXT extends CITEXT]
    },

    mssql: {
      BLOB: [class BLOB extends BLOB],
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      ENUM: [class ENUM extends ENUM],
      STRING: [class STRING extends STRING],
      UUID: [class UUID extends UUID],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      NOW: [class NOW extends NOW],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [class INTEGER extends INTEGER],
      BIGINT: [class BIGINT extends BIGINT],
      REAL: [class REAL extends REAL],
      FLOAT: [class FLOAT extends FLOAT],
      TEXT: [class TEXT extends TEXT]
    },
    db2: {
      BLOB: [class BLOB extends BLOB],
      BOOLEAN: [Function],
      ENUM: [class ENUM extends ENUM],
      STRING: [class STRING extends STRING],
      UUID: [class UUID extends UUID],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      NOW: [class NOW extends NOW],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [class INTEGER extends INTEGER],
      DOUBLE: [Function],
      'DOUBLE PRECISION': [Function],
      BIGINT: [class BIGINT extends BIGINT],
      REAL: [class REAL extends REAL],
      FLOAT: [class FLOAT extends FLOAT],
      TEXT: [class TEXT extends TEXT]
    },
    snowflake: {
      TEXT: [class TEXT extends TEXT],
      DATE: [class DATE extends DATE],
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    oracle: {
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      'DOUBLE PRECISION': [class DOUBLE extends DOUBLE],
      DOUBLE: [class DOUBLE extends DOUBLE],
      STRING: [class STRING extends STRING],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      MEDIUMINT: [class MEDIUMINT extends MEDIUMINT],
      BIGINT: [class BIGINT extends BIGINT],
      NUMBER: [class NUMBER extends NUMBER],
      INTEGER: [class INTEGER extends INTEGER],
      FLOAT: [class FLOAT extends FLOAT],
      UUID: [class UUID extends UUID],
      DATEONLY: [class DATEONLY extends DATEONLY],
      DATE: [class DATE extends DATE],
      NOW: [class NOW extends NOW],
      BLOB: [class BLOB extends BLOB],
      ENUM: [class ENUM extends ENUM],
      TEXT: [class TEXT extends TEXT],
      CHAR: [class CHAR extends CHAR],
      JSON: [class JSONTYPE extends JSONTYPE],
      REAL: [class REAL extends REAL],
      DECIMAL: [class DECIMAL extends DECIMAL]
    },
    Deferrable: {
      INITIALLY_DEFERRED: [class INITIALLY_DEFERRED extends ABSTRACT],
      INITIALLY_IMMEDIATE: [class INITIALLY_IMMEDIATE extends ABSTRACT],
      NOT: [class NOT extends ABSTRACT],
      SET_DEFERRED: [class SET_DEFERRED extends ABSTRACT],
      SET_IMMEDIATE: [class SET_IMMEDIATE extends ABSTRACT]
    },
    Association: <ref *7> [class Association] {
      BelongsTo: [Function],
      HasOne: [class HasOne extends Association],
      HasMany: [Function],
      BelongsToMany: [Function],
      default: [Circular *7],
      Association: [Circular *7]
    },
    useInflection: [Function: useInflection],
    _setupHooks: [Function: _setupHooks],
    runHooks: [AsyncFunction: runHooks],
    addHook: [Function: addHook],
    removeHook: [Function: removeHook],
    hasHook: [Function: hasHook],
    hasHooks: [Function: hasHook],
    beforeValidate: [Function (anonymous)],
    afterValidate: [Function (anonymous)],
    validationFailed: [Function (anonymous)],
    beforeCreate: [Function (anonymous)],
    afterCreate: [Function (anonymous)],
    beforeDestroy: [Function (anonymous)],
    afterDestroy: [Function (anonymous)],
    beforeRestore: [Function (anonymous)],
    afterRestore: [Function (anonymous)],
    beforeUpdate: [Function (anonymous)],
    afterUpdate: [Function (anonymous)],
    beforeSave: [Function (anonymous)],
    afterSave: [Function (anonymous)],
    beforeUpsert: [Function (anonymous)],
    afterUpsert: [Function (anonymous)],
    beforeBulkCreate: [Function (anonymous)],
    afterBulkCreate: [Function (anonymous)],
    beforeBulkDestroy: [Function (anonymous)],
    afterBulkDestroy: [Function (anonymous)],
    beforeBulkRestore: [Function (anonymous)],
    afterBulkRestore: [Function (anonymous)],
    beforeBulkUpdate: [Function (anonymous)],
    afterBulkUpdate: [Function (anonymous)],
    beforeFind: [Function (anonymous)],
    beforeFindAfterExpandIncludeAll: [Function (anonymous)],
    beforeFindAfterOptions: [Function (anonymous)],
    afterFind: [Function (anonymous)],
    beforeCount: [Function (anonymous)],
    beforeDefine: [Function (anonymous)],
    afterDefine: [Function (anonymous)],
    beforeInit: [Function (anonymous)],
    afterInit: [Function (anonymous)],
    beforeAssociate: [Function (anonymous)],
    afterAssociate: [Function (anonymous)],
    beforeConnect: [Function (anonymous)],
    afterConnect: [Function (anonymous)],
    beforeDisconnect: [Function (anonymous)],
    afterDisconnect: [Function (anonymous)],
    beforePoolAcquire: [Function (anonymous)],
    afterPoolAcquire: [Function (anonymous)],
    beforeSync: [Function (anonymous)],
    afterSync: [Function (anonymous)],
    beforeBulkSync: [Function (anonymous)],
    afterBulkSync: [Function (anonymous)],
    beforeQuery: [Function (anonymous)],
    afterQuery: [Function (anonymous)],
    Error: [class BaseError extends Error],
    AccessDeniedError: [class AccessDeniedError extends ConnectionError],
    AggregateError: [class AggregateError extends BaseError],
    AssociationError: [class AssociationError extends BaseError],
    AsyncQueueError: [class AsyncQueueError extends BaseError],
    BaseError: [class BaseError extends Error],
    BulkRecordError: [class BulkRecordError extends BaseError],
    ConnectionAcquireTimeoutError: [class ConnectionAcquireTimeoutError extends ConnectionError],
    ConnectionError: [class ConnectionError extends BaseError],
    ConnectionRefusedError: [class ConnectionRefusedError extends ConnectionError],
    ConnectionTimedOutError: [class ConnectionTimedOutError extends ConnectionError],
    DatabaseError: [class DatabaseError extends BaseError],
    EagerLoadingError: [class EagerLoadingError extends BaseError],
    EmptyResultError: [class EmptyResultError extends BaseError],
    ExclusionConstraintError: [class ExclusionConstraintError extends DatabaseError],
    ForeignKeyConstraintError: [class ForeignKeyConstraintError extends DatabaseError],
    HostNotFoundError: [class HostNotFoundError extends ConnectionError],
    HostNotReachableError: [class HostNotReachableError extends ConnectionError],
    InstanceError: [class InstanceError extends BaseError],
    InvalidConnectionError: [class InvalidConnectionError extends ConnectionError],
    OptimisticLockError: [class OptimisticLockError extends BaseError],
    QueryError: [class QueryError extends BaseError],
    SequelizeScopeError: [class SequelizeScopeError extends BaseError],
    TimeoutError: [class TimeoutError extends DatabaseError],
    UniqueConstraintError: [class UniqueConstraintError extends ValidationError],
    UnknownConstraintError: [class UnknownConstraintError extends DatabaseError],
    ValidationError: [class ValidationError extends BaseError],
    ValidationErrorItem: [class ValidationErrorItem] {
      TypeStringMap: [Object],
      Origins: [Object]
    },
    ValidationErrorItemOrigin: { CORE: 'CORE', DB: 'DB', FUNCTION: 'FUNCTION' },
    ValidationErrorItemType: {
      'notnull violation': 'CORE',
      'string violation': 'CORE',
      'unique violation': 'DB',
      'validation error': 'FUNCTION'
    },
    Sequelize: [Circular *8],
    default: [Circular *8]
  },
  testConnection: [AsyncFunction (anonymous)],
  syncDatabase: [AsyncFunction (anonymous)]
}
DB object in authMiddleware before calling authService.getMe: {
  Action: Action,
  Addon: Addon,
  Answer: Answer,
  AuditLog: AuditLog,
  CashRegisterCategory: CashRegisterCategory,
  CashRegisterMovement: CashRegisterMovement,
  CashRegisterSession: CashRegisterSession,
  Category: Category,
  Checkin: Checkin,
  Coupon: Coupon,
  Customer: Customer,
  Feature: Feature,
  Feedback: Feedback,
  FinancialCategory: FinancialCategory,
  FinancialTransaction: FinancialTransaction,
  Ingredient: Ingredient,
  LossRecord: LossRecord,
  Module: Module,
  NpsCriterion: NpsCriterion,
  Order: Order,
  PaymentMethod: PaymentMethod,
  PrintedLabel: PrintedLabel,
  Product: Product,
  ProductionRecord: ProductionRecord,
  ProductionRecordItem: ProductionRecordItem,
  QRCode: QRCode,
  Question: Question,
  RecipeIngredient: RecipeIngredient,
  Restaurant: Restaurant,
  RestaurantEntitlement: RestaurantEntitlement,
  Reward: Reward,
  Role: Role,
  RolePermission: RolePermission,
  Stock: Stock,
  StockCount: StockCount,
  StockCountItem: StockCountItem,
  StockMovement: StockMovement,
  Submodule: Submodule,
  Supplier: Supplier,
  Survey: Survey,
  SurveyResponse: SurveyResponse,
  Table: Table,
  TableSession: TableSession,
  TechnicalSpecification: TechnicalSpecification,
  User: User,
  UserPermissionOverride: UserPermissionOverride,
  UserRestaurant: UserRestaurant,
  UserRole: UserRole,
  WaiterCall: WaiterCall,
  WhatsappMessage: WhatsappMessage,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'postgres',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: false,
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.19.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      username: 'postgres',
      password: 'b74996144735db08d6e091f460df4184',
      database: 'feedeliza',
      port: '5432'
    },
    config: {
      database: 'feedeliza',
      username: 'postgres',
      password: 'b74996144735db08d6e091f460df4184',
      host: 'postgres',
      port: '5432',
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      Action: Action,
      Addon: Addon,
      Answer: Answer,
      AuditLog: AuditLog,
      CashRegisterCategory: CashRegisterCategory,
      CashRegisterMovement: CashRegisterMovement,
      CashRegisterSession: CashRegisterSession,
      Category: Category,
      Checkin: Checkin,
      Coupon: Coupon,
      Customer: Customer,
      Feature: Feature,
      Feedback: Feedback,
      FinancialCategory: FinancialCategory,
      FinancialTransaction: FinancialTransaction,
      Ingredient: Ingredient,
      LossRecord: LossRecord,
      Module: Module,
      NpsCriterion: NpsCriterion,
      Order: Order,
      PaymentMethod: PaymentMethod,
      PrintedLabel: PrintedLabel,
      Product: Product,
      ProductionRecord: ProductionRecord,
      ProductionRecordItem: ProductionRecordItem,
      QRCode: QRCode,
      Question: Question,
      RecipeIngredient: RecipeIngredient,
      Restaurant: Restaurant,
      RestaurantEntitlement: RestaurantEntitlement,
      Reward: Reward,
      Role: Role,
      RolePermission: RolePermission,
      Stock: Stock,
      StockCount: StockCount,
      StockCountItem: StockCountItem,
      StockMovement: StockMovement,
      Submodule: Submodule,
      Supplier: Supplier,
      Survey: Survey,
      SurveyResponse: SurveyResponse,
      Table: Table,
      TableSession: TableSession,
      TechnicalSpecification: TechnicalSpecification,
      User: User,
      UserPermissionOverride: UserPermissionOverride,
      UserRestaurant: UserRestaurant,
      UserRole: UserRole,
      WaiterCall: WaiterCall,
      WhatsappMessage: WhatsappMessage
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  Sequelize: <ref *8> [class Sequelize] {
    version: [Getter],
    options: { hooks: {} },

    Utils: {
      classToInvokable: [Function: classToInvokable],
      joinSQLFragments: [Function: joinSQLFragments],
      useInflection: [Function: useInflection],
      camelizeIf: [Function: camelizeIf],
      underscoredIf: [Function: underscoredIf],
      isPrimitive: [Function: isPrimitive],
      mergeDefaults: [Function: mergeDefaults],
      merge: [Function: merge],
      spliceStr: [Function: spliceStr],
      camelize: [Function: camelize],
      underscore: [Function: underscore],
      singularize: [Function: singularize],
      pluralize: [Function: pluralize],
      format: [Function: format],
      formatNamedParameters: [Function: formatNamedParameters],
      cloneDeep: [Function: cloneDeep],
      mapFinderOptions: [Function: mapFinderOptions],
      mapOptionFieldNames: [Function: mapOptionFieldNames],
      mapWhereFieldNames: [Function: mapWhereFieldNames],
      mapValueFieldNames: [Function: mapValueFieldNames],
      isColString: [Function: isColString],
      canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
      combineTableNames: [Function: combineTableNames],
      toDefaultValue: [Function: toDefaultValue],
      defaultValueSchemable: [Function: defaultValueSchemable],
      removeNullValuesFromHash: [Function: removeNullValuesFromHash],
      now: [Function: now],
      TICK_CHAR: '`',
      addTicks: [Function: addTicks],
      removeTicks: [Function: removeTicks],
      flattenObjectDeep: [Function: flattenObjectDeep],
      SequelizeMethod: [class SequelizeMethod],
      Fn: [class Fn extends SequelizeMethod],
      Col: [class Col extends SequelizeMethod],
      Cast: [class Cast extends SequelizeMethod],
      Literal: [class Literal extends SequelizeMethod],
      Json: [class Json extends SequelizeMethod],
      Where: [class Where extends SequelizeMethod],
      getOperators: [Function: getOperators],
      getComplexKeys: [Function: getComplexKeys],
      getComplexSize: [Function: getComplexSize],
      isWhereEmpty: [Function: isWhereEmpty],
      generateEnumName: [Function: generateEnumName],
      camelizeObjectKeys: [Function: camelizeObjectKeys],
      defaults: [Function: defaults],
      nameIndex: [Function: nameIndex],
      intersects: [Function: intersects],
      safeStringifyJson: [Function: safeStringifyJson]
    },

{
      eq: Symbol(eq),
      ne: Symbol(ne),
      gte: Symbol(gte),
      gt: Symbol(gt),
      lte: Symbol(lte),
      lt: Symbol(lt),
      not: Symbol(not),
      is: Symbol(is),
      in: Symbol(in),
      notIn: Symbol(notIn),
      like: Symbol(like),
      notLike: Symbol(notLike),
      iLike: Symbol(iLike),
      notILike: Symbol(notILike),
      startsWith: Symbol(startsWith),
      endsWith: Symbol(endsWith),
      substring: Symbol(substring),
      regexp: Symbol(regexp),
      notRegexp: Symbol(notRegexp),
      iRegexp: Symbol(iRegexp),
      notIRegexp: Symbol(notIRegexp),
      between: Symbol(between),
      notBetween: Symbol(notBetween),
      overlap: Symbol(overlap),
      contains: Symbol(contains),
      contained: Symbol(contained),
      adjacent: Symbol(adjacent),
      strictLeft: Symbol(strictLeft),
      strictRight: Symbol(strictRight),
      noExtendRight: Symbol(noExtendRight),
      noExtendLeft: Symbol(noExtendLeft),
      and: Symbol(and),
      or: Symbol(or),
      any: Symbol(any),
      all: Symbol(all),
      values: Symbol(values),
      col: Symbol(col),
      placeholder: Symbol(placeholder),
      join: Symbol(join),
      match: Symbol(match)
    },
    TableHints: {
      NOLOCK: 'NOLOCK',
      READUNCOMMITTED: 'READUNCOMMITTED',
      UPDLOCK: 'UPDLOCK',
      REPEATABLEREAD: 'REPEATABLEREAD',
      SERIALIZABLE: 'SERIALIZABLE',
      READCOMMITTED: 'READCOMMITTED',
      TABLOCK: 'TABLOCK',
      TABLOCKX: 'TABLOCKX',
      PAGLOCK: 'PAGLOCK',
      ROWLOCK: 'ROWLOCK',
      NOWAIT: 'NOWAIT',
      READPAST: 'READPAST',
      XLOCK: 'XLOCK',
      SNAPSHOT: 'SNAPSHOT',
      NOEXPAND: 'NOEXPAND'
    },
    IndexHints: { USE: 'USE', FORCE: 'FORCE', IGNORE: 'IGNORE' },
    Transaction: <ref *2> [class Transaction] {
      Transaction: [Circular *2],
      default: [Circular *2]
    },
    QueryTypes: {
      SELECT: 'SELECT',
      INSERT: 'INSERT',
      UPDATE: 'UPDATE',
      BULKUPDATE: 'BULKUPDATE',
      BULKDELETE: 'BULKDELETE',
      DELETE: 'DELETE',
      UPSERT: 'UPSERT',
      VERSION: 'VERSION',
      SHOWTABLES: 'SHOWTABLES',
      SHOWINDEXES: 'SHOWINDEXES',
      DESCRIBE: 'DESCRIBE',
      RAW: 'RAW',
      FOREIGNKEYS: 'FOREIGNKEYS',
      SHOWCONSTRAINTS: 'SHOWCONSTRAINTS'
    },
    Validator: <ref *3> {
      version: '13.12.0',
      toDate: [Function],
      toFloat: [Function],
      toInt: [Function],
      toBoolean: [Function],
      equals: [Function],
      contains: [Function: contains],
      matches: [Function],
      isEmail: [Function],
      isURL: [Function],
      isMACAddress: [Function],
      isIP: [Function],
      isIPRange: [Function],
      isFQDN: [Function],
      isBoolean: [Function],
      isIBAN: [Function: isIBAN],
      isBIC: [Function],
      isAbaRouting: [Function],
      isAlpha: [Function: isAlpha],
      isAlphaLocales: [Array],
      isAlphanumeric: [Function: isAlphanumeric],
      isAlphanumericLocales: [Array],
      isNumeric: [Function],
      isPassportNumber: [Function],
      isPort: [Function],
      isLowercase: [Function],
      isUppercase: [Function],
      isAscii: [Function],
      isFullWidth: [Function: isFullWidth],
      isHalfWidth: [Function: isHalfWidth],
      isVariableWidth: [Function],
      isMultibyte: [Function],
      isSemVer: [Function],
      isSurrogatePair: [Function],
      isInt: [Function],
      isIMEI: [Function],
      isFloat: [Function: isFloat],
      isFloatLocales: [Array],
      isDecimal: [Function: isDecimal],
      isHexadecimal: [Function],
      isOctal: [Function],
      isDivisibleBy: [Function],
      isHexColor: [Function],
      isRgbColor: [Function],
      isHSL: [Function],
      isISRC: [Function],
      isMD5: [Function],
      isHash: [Function],
      isJWT: [Function],
      isJSON: [Function],
      isEmpty: [Function],
      isLength: [Function],
      isLocale: [Function],
      isByteLength: [Function],
      isUUID: [Function],
      isMongoId: [Function],
      isAfter: [Function],
      isBefore: [Function],
      isIn: [Function],
      isLuhnNumber: [Function],
      isCreditCard: [Function],
      isIdentityCard: [Function],
      isEAN: [Function],
      isISIN: [Function],
      isISBN: [Function],
      isISSN: [Function],
      isMobilePhone: [Function: isMobilePhone],
      isMobilePhoneLocales: [Array],
      isPostalCode: [Function: isPostalCode],
      isPostalCodeLocales: [Array],
      isEthereumAddress: [Function],
      isCurrency: [Function],
      isBtcAddress: [Function],
      isISO6346: [Function: isISO6346],
      isFreightContainerID: [Function: isISO6346],
      isISO6391: [Function],
      isISO8601: [Function],
      isRFC3339: [Function],
      isISO31661Alpha2: [Function: isISO31661Alpha2],
      isISO31661Alpha3: [Function],
      isISO4217: [Function: isISO4217],
      isBase32: [Function],
      isBase58: [Function],
      isBase64: [Function],
      isDataURI: [Function],
      isMagnetURI: [Function],
      isMailtoURI: [Function],
      isMimeType: [Function],
      isLatLong: [Function],
      ltrim: [Function],
      rtrim: [Function],
      trim: [Function],
      escape: [Function],
      unescape: [Function],
      stripLow: [Function],
      whitelist: [Function],
      blacklist: [Function],
      isWhitelisted: [Function],
      normalizeEmail: [Function],
      toString: [Function: toString],
      isSlug: [Function],
      isStrongPassword: [Function],
      isTaxID: [Function],
      isDate: [Function (anonymous)],
      isTime: [Function],
      isLicensePlate: [Function],
      isVAT: [Function: isVAT],
      ibanLocales: [Array],
      default: [Circular *3],
      isImmutable: [Function (anonymous)],
      notNull: [Function (anonymous)],
      extend: [Function: extend],
      notEmpty: [Function: notEmpty],
      len: [Function: len],
      isUrl: [Function: isUrl],
      isIPv6: [Function: isIPv6],
      isIPv4: [Function: isIPv4],
      notIn: [Function: notIn],
      regex: [Function: regex],
      notRegex: [Function: notRegex],
      min: [Function: min],
      max: [Function: max],
      not: [Function: not],
      notContains: [Function: notContains],
      is: [Function: is],
      isNull: [Function]
    },
    Model: Model,
    QueryInterface: [class QueryInterface],
    BelongsTo: <ref *4> [class BelongsTo extends Association] {
      BelongsTo: [Circular *4],
      default: [Circular *4]
    },
    HasOne: [class HasOne extends Association],
    HasMany: <ref *5> [class HasMany extends Association] {
      HasMany: [Circular *5],
      default: [Circular *5]
    },
    BelongsToMany: <ref *6> [class BelongsToMany extends Association] {
      BelongsToMany: [Circular *6],
      default: [Circular *6]
    },
    DataTypes: {
      ABSTRACT: [Function],
      STRING: [Function],
      CHAR: [Function],
      TEXT: [Function],
      NUMBER: [Function],
      TINYINT: [Function],
      SMALLINT: [Function],
      MEDIUMINT: [Function],
      INTEGER: [Function],
      BIGINT: [Function],
      FLOAT: [Function],
      TIME: [Function],
      DATE: [Function],
      DATEONLY: [Function],
      BOOLEAN: [Function],
      NOW: [Function],
      BLOB: [Function],
      DECIMAL: [Function],
      NUMERIC: [Function],
      UUID: [Function],
      UUIDV1: [Function],
      UUIDV4: [Function],
      HSTORE: [Function],
      JSON: [Function],
      JSONB: [Function],
      VIRTUAL: [Function],
      ARRAY: [Function],
      ENUM: [Function],
      RANGE: [Function],
      REAL: [Function],
      'DOUBLE PRECISION': [Function],
      DOUBLE: [Function],
      GEOMETRY: [Function],
      GEOGRAPHY: [Function],
      CIDR: [Function],
      INET: [Function],
      MACADDR: [Function],
      CITEXT: [Function],
      TSVECTOR: [Function],
      postgres: [Object],
      mysql: [Object],
      mariadb: [Object],
      sqlite: [Object],
      mssql: [Object],
      db2: [Object],
      snowflake: [Object],
      oracle: [Object]
    },
    ABSTRACT: [class ABSTRACT] { types: {}, key: 'ABSTRACT' },
    STRING: [class STRING extends ABSTRACT] { types: [Object], key: 'STRING' },
    CHAR: [class CHAR extends STRING] { types: [Object], key: 'CHAR' },
    TEXT: [class TEXT extends ABSTRACT] { types: [Object], key: 'TEXT' },
    NUMBER: [class NUMBER extends ABSTRACT] { types: {}, key: 'NUMBER' },
    TINYINT: [class TINYINT extends INTEGER] { types: [Object], key: 'TINYINT' },
    SMALLINT: [class SMALLINT extends INTEGER] {
      types: [Object],
      key: 'SMALLINT'
    },
    MEDIUMINT: [class MEDIUMINT extends INTEGER] {
      types: [Object],
      key: 'MEDIUMINT'
    },
    INTEGER: [class INTEGER extends NUMBER] { types: [Object], key: 'INTEGER' },
    BIGINT: [class BIGINT extends INTEGER] { types: [Object], key: 'BIGINT' },
    FLOAT: [class FLOAT extends NUMBER] { types: [Object], key: 'FLOAT' },
    TIME: [class TIME extends ABSTRACT] { types: [Object], key: 'TIME' },
    DATE: [class DATE extends ABSTRACT] { types: [Object], key: 'DATE' },
    DATEONLY: [class DATEONLY extends ABSTRACT] {
      types: [Object],
      key: 'DATEONLY'
    },
    BOOLEAN: [class BOOLEAN extends ABSTRACT] {
      parse: [Function: _sanitize],
      types: [Object],
      key: 'BOOLEAN'
    },
    NOW: [class NOW extends ABSTRACT] { types: {}, key: 'NOW' },
    BLOB: [class BLOB extends ABSTRACT] { types: [Object], key: 'BLOB' },
    DECIMAL: [class DECIMAL extends NUMBER] { types: [Object], key: 'DECIMAL' },
    NUMERIC: [class DECIMAL extends NUMBER] { types: [Object], key: 'DECIMAL' },
    UUID: [class UUID extends ABSTRACT] { types: [Object], key: 'UUID' },
    UUIDV1: [class UUIDV1 extends ABSTRACT] { types: {}, key: 'UUIDV1' },
    UUIDV4: [class UUIDV4 extends ABSTRACT] { types: {}, key: 'UUIDV4' },
    HSTORE: [class HSTORE extends ABSTRACT] { types: [Object], key: 'HSTORE' },
    JSON: [class JSONTYPE extends ABSTRACT] { types: [Object], key: 'JSON' },
    JSONB: [class JSONB extends JSONTYPE] { types: [Object], key: 'JSONB' },
    VIRTUAL: [class VIRTUAL extends ABSTRACT] { types: {}, key: 'VIRTUAL' },
    ARRAY: [class ARRAY extends ABSTRACT] { types: {}, key: 'ARRAY' },
    ENUM: [class ENUM extends ABSTRACT] { types: [Object], key: 'ENUM' },
    RANGE: [class RANGE extends ABSTRACT] { types: [Object], key: 'RANGE' },
    REAL: [class REAL extends NUMBER] { types: [Object], key: 'REAL' },
    'DOUBLE PRECISION': [class DOUBLE extends NUMBER] {
      types: [Object],
      key: 'DOUBLE PRECISION'
    },
    DOUBLE: [class DOUBLE extends NUMBER] {
      types: [Object],
      key: 'DOUBLE PRECISION'
    },
    GEOMETRY: [class GEOMETRY extends ABSTRACT] {
      types: [Object],
      key: 'GEOMETRY'
    },
    GEOGRAPHY: [class GEOGRAPHY extends ABSTRACT] {
      types: [Object],
      key: 'GEOGRAPHY'
    },
    CIDR: [class CIDR extends ABSTRACT] { types: [Object], key: 'CIDR' },
    INET: [class INET extends ABSTRACT] { types: [Object], key: 'INET' },
    MACADDR: [class MACADDR extends ABSTRACT] { types: [Object], key: 'MACADDR' },
    CITEXT: [class CITEXT extends ABSTRACT] { types: [Object], key: 'CITEXT' },
    TSVECTOR: [class TSVECTOR extends ABSTRACT] {
      types: [Object],
      key: 'TSVECTOR'
    },
    postgres: {
      DECIMAL: [class DECIMAL extends DECIMAL],
      BLOB: [class BLOB extends BLOB],
      STRING: [class STRING extends STRING],
      CHAR: [class CHAR extends CHAR],
      TEXT: [class TEXT extends TEXT],
      CITEXT: [class CITEXT extends CITEXT],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [Function],
      BIGINT: [class BIGINT extends BIGINT],
      BOOLEAN: [Function],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      REAL: [class REAL extends REAL],
      'DOUBLE PRECISION': [class DOUBLE extends DOUBLE],
      FLOAT: [class FLOAT extends FLOAT],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      GEOGRAPHY: [class GEOGRAPHY extends GEOGRAPHY],
      HSTORE: [class HSTORE extends HSTORE],
      RANGE: [class RANGE extends RANGE],
      ENUM: [class ENUM extends ENUM]
    },

    mysql: {
      ENUM: [class ENUM extends ENUM],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      DECIMAL: [class DECIMAL extends DECIMAL],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    mariadb: {
      ENUM: [class ENUM extends ENUM],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      GEOMETRY: [class GEOMETRY extends GEOMETRY],
      DECIMAL: [class DECIMAL extends DECIMAL],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    sqlite: {
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      STRING: [class STRING extends STRING],
      CHAR: [class CHAR extends CHAR],
      NUMBER: [class NUMBER extends NUMBER],
      FLOAT: [Function],
      REAL: [Function],
      'DOUBLE PRECISION': [Function],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      MEDIUMINT: [class MEDIUMINT extends MEDIUMINT],
      INTEGER: [class INTEGER extends INTEGER],
      BIGINT: [class BIGINT extends BIGINT],
      TEXT: [class TEXT extends TEXT],
      ENUM: [class ENUM extends ENUM],
      JSON: [class JSONTYPE extends JSONTYPE],
      CITEXT: [class CITEXT extends CITEXT]
    },

    mssql: {
      BLOB: [class BLOB extends BLOB],
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      ENUM: [class ENUM extends ENUM],
      STRING: [class STRING extends STRING],
      UUID: [class UUID extends UUID],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      NOW: [class NOW extends NOW],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [class INTEGER extends INTEGER],
      BIGINT: [class BIGINT extends BIGINT],
      REAL: [class REAL extends REAL],
      FLOAT: [class FLOAT extends FLOAT],
      TEXT: [class TEXT extends TEXT]
    },
    db2: {
      BLOB: [class BLOB extends BLOB],
      BOOLEAN: [Function],
      ENUM: [class ENUM extends ENUM],
      STRING: [class STRING extends STRING],
      UUID: [class UUID extends UUID],
      DATE: [class DATE extends DATE],
      DATEONLY: [class DATEONLY extends DATEONLY],
      NOW: [class NOW extends NOW],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      INTEGER: [class INTEGER extends INTEGER],
      DOUBLE: [Function],
      'DOUBLE PRECISION': [Function],
      BIGINT: [class BIGINT extends BIGINT],
      REAL: [class REAL extends REAL],
      FLOAT: [class FLOAT extends FLOAT],
      TEXT: [class TEXT extends TEXT]
    },
    snowflake: {
      TEXT: [class TEXT extends TEXT],
      DATE: [class DATE extends DATE],
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      DATEONLY: [class DATEONLY extends DATEONLY],
      UUID: [class UUID extends UUID],
      JSON: [class JSONTYPE extends JSONTYPE]
    },
    oracle: {
      BOOLEAN: [class BOOLEAN extends BOOLEAN],
      'DOUBLE PRECISION': [class DOUBLE extends DOUBLE],
      DOUBLE: [class DOUBLE extends DOUBLE],
      STRING: [class STRING extends STRING],
      TINYINT: [class TINYINT extends TINYINT],
      SMALLINT: [class SMALLINT extends SMALLINT],
      MEDIUMINT: [class MEDIUMINT extends MEDIUMINT],
      BIGINT: [class BIGINT extends BIGINT],
      NUMBER: [class NUMBER extends NUMBER],
      INTEGER: [class INTEGER extends INTEGER],
      FLOAT: [class FLOAT extends FLOAT],
      UUID: [class UUID extends UUID],
      DATEONLY: [class DATEONLY extends DATEONLY],
      DATE: [class DATE extends DATE],
      NOW: [class NOW extends NOW],
      BLOB: [class BLOB extends BLOB],
      ENUM: [class ENUM extends ENUM],
      TEXT: [class TEXT extends TEXT],
      CHAR: [class CHAR extends CHAR],
      JSON: [class JSONTYPE extends JSONTYPE],
      REAL: [class REAL extends REAL],
      DECIMAL: [class DECIMAL extends DECIMAL]
    },
    Deferrable: {
      INITIALLY_DEFERRED: [class INITIALLY_DEFERRED extends ABSTRACT],
      INITIALLY_IMMEDIATE: [class INITIALLY_IMMEDIATE extends ABSTRACT],
      NOT: [class NOT extends ABSTRACT],
      SET_DEFERRED: [class SET_DEFERRED extends ABSTRACT],
      SET_IMMEDIATE: [class SET_IMMEDIATE extends ABSTRACT]
    },
    Association: <ref *7> [class Association] {
      BelongsTo: [Function],
      HasOne: [class HasOne extends Association],
      HasMany: [Function],
      BelongsToMany: [Function],
      default: [Circular *7],
      Association: [Circular *7]
    },
    useInflection: [Function: useInflection],
    _setupHooks: [Function: _setupHooks],
    runHooks: [AsyncFunction: runHooks],
    addHook: [Function: addHook],
    removeHook: [Function: removeHook],
    hasHook: [Function: hasHook],
    hasHooks: [Function: hasHook],
    beforeValidate: [Function (anonymous)],
    afterValidate: [Function (anonymous)],
    validationFailed: [Function (anonymous)],
    beforeCreate: [Function (anonymous)],
    afterCreate: [Function (anonymous)],
    beforeDestroy: [Function (anonymous)],
    afterDestroy: [Function (anonymous)],
    beforeRestore: [Function (anonymous)],
    afterRestore: [Function (anonymous)],
    beforeUpdate: [Function (anonymous)],
    afterUpdate: [Function (anonymous)],
    beforeSave: [Function (anonymous)],
    afterSave: [Function (anonymous)],
    beforeUpsert: [Function (anonymous)],
    afterUpsert: [Function (anonymous)],
    beforeBulkCreate: [Function (anonymous)],
    afterBulkCreate: [Function (anonymous)],
    beforeBulkDestroy: [Function (anonymous)],
    afterBulkDestroy: [Function (anonymous)],
    beforeBulkRestore: [Function (anonymous)],
    afterBulkRestore: [Function (anonymous)],
    beforeBulkUpdate: [Function (anonymous)],
    afterBulkUpdate: [Function (anonymous)],
    beforeFind: [Function (anonymous)],
    beforeFindAfterExpandIncludeAll: [Function (anonymous)],
    beforeFindAfterOptions: [Function (anonymous)],
    afterFind: [Function (anonymous)],
    beforeCount: [Function (anonymous)],
    beforeDefine: [Function (anonymous)],
    afterDefine: [Function (anonymous)],
    beforeInit: [Function (anonymous)],
    afterInit: [Function (anonymous)],
    beforeAssociate: [Function (anonymous)],
    afterAssociate: [Function (anonymous)],
    beforeConnect: [Function (anonymous)],
    afterConnect: [Function (anonymous)],
    beforeDisconnect: [Function (anonymous)],
    afterDisconnect: [Function (anonymous)],
    beforePoolAcquire: [Function (anonymous)],
    afterPoolAcquire: [Function (anonymous)],
    beforeSync: [Function (anonymous)],
    afterSync: [Function (anonymous)],
    beforeBulkSync: [Function (anonymous)],
    afterBulkSync: [Function (anonymous)],
    beforeQuery: [Function (anonymous)],
    afterQuery: [Function (anonymous)],
    Error: [class BaseError extends Error],
    AccessDeniedError: [class AccessDeniedError extends ConnectionError],
    AggregateError: [class AggregateError extends BaseError],
    AssociationError: [class AssociationError extends BaseError],
    AsyncQueueError: [class AsyncQueueError extends BaseError],
    BaseError: [class BaseError extends Error],
    BulkRecordError: [class BulkRecordError extends BaseError],
    ConnectionAcquireTimeoutError: [class ConnectionAcquireTimeoutError extends ConnectionError],
    ConnectionError: [class ConnectionError extends BaseError],
    ConnectionRefusedError: [class ConnectionRefusedError extends ConnectionError],
    ConnectionTimedOutError: [class ConnectionTimedOutError extends ConnectionError],
    DatabaseError: [class DatabaseError extends BaseError],
    EagerLoadingError: [class EagerLoadingError extends BaseError],
    EmptyResultError: [class EmptyResultError extends BaseError],
    ExclusionConstraintError: [class ExclusionConstraintError extends DatabaseError],
    ForeignKeyConstraintError: [class ForeignKeyConstraintError extends DatabaseError],
    HostNotFoundError: [class HostNotFoundError extends ConnectionError],
    HostNotReachableError: [class HostNotReachableError extends ConnectionError],
    InstanceError: [class InstanceError extends BaseError],
    InvalidConnectionError: [class InvalidConnectionError extends ConnectionError],
    OptimisticLockError: [class OptimisticLockError extends BaseError],
    QueryError: [class QueryError extends BaseError],
    SequelizeScopeError: [class SequelizeScopeError extends BaseError],
    TimeoutError: [class TimeoutError extends DatabaseError],
    UniqueConstraintError: [class UniqueConstraintError extends ValidationError],
    UnknownConstraintError: [class UnknownConstraintError extends DatabaseError],
    ValidationError: [class ValidationError extends BaseError],
    ValidationErrorItem: [class ValidationErrorItem] {
      TypeStringMap: [Object],
      Origins: [Object]
    },
    ValidationErrorItemOrigin: { CORE: 'CORE', DB: 'DB', FUNCTION: 'FUNCTION' },
    ValidationErrorItemType: {
      'notnull violation': 'CORE',
      'string violation': 'CORE',
      'unique violation': 'DB',
      'validation error': 'FUNCTION'
    },
    Sequelize: [Circular *8],
    default: [Circular *8]
  },
  testConnection: [AsyncFunction (anonymous)],
  syncDatabase: [AsyncFunction (anonymous)]
}