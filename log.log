> Feedeliza+@1.0.0 start
> node backend/server.js
node:internal/modules/cjs/loader:1215

  throw err;
  ^
Error: Cannot find module '../../utils/thermalPrinterService'
Require stack:
- /app/backend/routes/public_orders.js
- /app/backend/server.js
    at Module._resolveFilename (node:internal/modules/cjs/loader:1212:15)
    at Module._load (node:internal/modules/cjs/loader:1043:27)
    at Module.require (node:internal/modules/cjs/loader:1298:19)
    at require (node:internal/modules/helpers:182:18)
    at Object.<anonymous> (/app/backend/routes/public_orders.js:5:36)
    at Module._compile (node:internal/modules/cjs/loader:1529:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1613:10)
    at Module.load (node:internal/modules/cjs/loader:1275:32)
    at Module._load (node:internal/modules/cjs/loader:1096:12)
    at Module.require (node:internal/modules/cjs/loader:1298:19) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [ '/app/backend/routes/public_orders.js', '/app/backend/server.js' ]
}
Node.js v20.19.4

const generateEscPosCommands = (order, restaurantName) => {
  let commands = '';

  // Initialize printer (clear buffer, reset modes)
  commands += '@'; // ESC @ - Initialize printer

  // Center alignment
  commands += 'a'; // ESC a 1 - Center alignment

  // Restaurant Name (Large, Bold)
  commands += '!8'; // ESC ! 38 - Double height and width
  commands += `${restaurantName}\n`;
  commands += '! '; // ESC ! 00 - Normal text

  // Normal alignment
  commands += 'a '; // ESC a 0 - Left alignment

  commands += `----------------------------------------\n`;
  commands += `Pedido ID: ${order.id.substring(0, 8).toUpperCase()}\n`;
  commands += `Data/Hora: ${new Date(order.order_date).toLocaleString('pt-BR')}\n`;
  commands += `----------------------------------------\n`;

  // Customer Details
  commands += `Cliente: ${order.customer_details.name}\n`;
  commands += `Telefone: ${order.customer_details.phone}\n`;
  if (order.delivery_type === 'delivery' && order.delivery_address) {
    commands += `EndereÃ§o: ${order.delivery_address.address}\n`; // Assuming 'address' is a single string for now
    if (order.delivery_address.complement) {
      commands += `Complemento: ${order.delivery_address.complement}\n`;
    }
  }
  commands += `Tipo: ${order.delivery_type.toUpperCase()}\n`;
  commands += `Pagamento: ${order.payment_method}\n`;
  if (order.notes) {
    commands += `ObservaÃ§Ãµes: ${order.notes}\n`;
  }
  commands += `----------------------------------------\n`;

  // Items
  commands += `ITENS:\n`;
  order.items.forEach((item) => {
    commands += `${item.quantity}x ${item.name} - R$ ${parseFloat(item.price).toFixed(2)}\n`;
  });
  commands += `----------------------------------------\n`;

  // Total Amount
  commands += `TOTAL: R$ ${parseFloat(order.total_amount).toFixed(2)}\n`;
  commands += `----------------------------------------\n`;

  // Cut paper (partial cut)
  commands += 'V'; // GS V 1 - Partial cut

  return commands;
};

module.exports = { generateEscPosCommands };
