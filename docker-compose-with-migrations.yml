version: '3.8'

# Este arquivo foi modificado para usar Docker Secrets e para corrigir o comando de migração.
# Lembre-se que você precisa criar os secrets no seu Docker Swarm manualmente.
# Exemplo de comandos para criar os secrets:
# echo "sua_senha_do_banco" | docker secret create db_password -
# echo "sua_chave_jwt_super_secreta" | docker secret create jwt_secret -

services:
  migrations:
    build:
      context: /root/opsmac
      dockerfile: Dockerfile.backend
    image: feedeliza-backend:latest
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=feedeliza
      - DB_USER=postgres
      # A senha agora é lida do secret e injetada como um arquivo em /run/secrets/
      - DB_PASSWORD_FILE=/run/secrets/db_password
    command: >
      /bin/sh -c "
        echo 'Waiting for database to be ready...'
        sleep 15
        echo 'Running migrations...'
        npx sequelize-cli db:migrate --config config/config.js --migrations-path migrations --models-path backend/models &&
        echo 'Running seeders...'
        npx sequelize-cli db:seed:all --config config/config.js --seeders-path seeders
      "
    networks:
      - towersfy_network
    volumes:
      - /root/opsmac:/app
    secrets:
      - db_password
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    build:
      context: /root/opsmac
      dockerfile: Dockerfile.backend
    image: feedeliza-backend:latest
    environment:
      - NODE_ENV=production
      - FRONTEND_URL=https://feedelizapro.towersfy.com
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=feedeliza
      - DB_USER=postgres
      # A senha e o JWT secret agora são lidos de secrets
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
    secrets:
      - db_password
      - jwt_secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`feedelizaapi.towersfy.com`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.backend.loadbalancer.server.port=5000"
        - "traefik.http.routers.backend-uploads.rule=Host(`feedelizaapi.towersfy.com`) && PathPrefix(`/uploads`)"
        - "traefik.http.routers.backend-uploads.entrypoints=websecure"
        - "traefik.http.routers.backend-uploads.tls.certresolver=letsencryptresolver"
        - "traefik.http.routers.backend-uploads.priority=100"
    networks:
      - towersfy_network
    volumes:
      - /root/opsmac:/app
      - uploads_data:/app/backend/public/uploads
    depends_on:
      - migrations

  frontend:
    build:
      context: /root/opsmac
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_API_URL=https://feedelizaapi.towersfy.com
    image: feedeliza-frontend:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`feedelizapro.towersfy.com`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - towersfy_network

networks:
  towersfy_network:
    external: true

volumes:
  uploads_data:

# Declaração dos secrets que serão usados. O Docker espera que eles já existam no Swarm.
secrets:
  db_password:
    external: true
  jwt_secret:
    external: true