'use strict';
const { Model, DataTypes } = require('sequelize');
const rewardsService = require('../src/domains/rewards/rewards.service'); // Import the new service

module.exports = (sequelize) => {
  class Reward extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      Reward.hasMany(models.Coupon, { foreignKey: 'reward_id', as: 'coupons' });
    }
  }

  Reward.init({
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true,
    },
    title: {
      type: DataTypes.STRING(150),
      allowNull: false,
      validate: {
        notEmpty: {
          msg: 'Título da recompensa é obrigatório',
        },
        len: {
          args: [3, 150],
          msg: 'Título deve ter entre 3 e 150 caracteres',
        },
      },
    },
    description: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    reward_type: {
      type: DataTypes.ENUM('discount_percentage', 'discount_fixed', 'free_item', 'points', 'cashback', 'gift', 'spin_the_wheel'),
      allowNull: false,
    },
    value: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: true,
    },
    wheel_config: {
      type: DataTypes.JSONB,
      allowNull: true,
      defaultValue: {},
    },
    points_required: {
      type: DataTypes.INTEGER,
      allowNull: true,
      defaultValue: 100,
    },
    max_uses_per_customer: {
      type: DataTypes.INTEGER,
      allowNull: true,
    },
    total_uses_limit: {
      type: DataTypes.INTEGER,
      allowNull: true,
      validate: {
        min: {
          args: [1],
          msg: 'Limite total de usos deve ser pelo menos 1',
        },
      },
    },
    current_uses: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    minimum_purchase: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: true,
      validate: {
        min: {
          args: [0],
          msg: 'Compra mínima deve ser positiva',
        },
      },
    },
    applicable_items: {
      type: DataTypes.ARRAY(DataTypes.STRING),
      allowNull: true,
      defaultValue: [],
    },
    excluded_items: {
      type: DataTypes.ARRAY(DataTypes.STRING),
      allowNull: true,
      defaultValue: [],
    },
    valid_from: {
      type: DataTypes.DATE,
      allowNull: true,
      defaultValue: DataTypes.NOW,
    },
    valid_until: {
      type: DataTypes.DATE,
      allowNull: true,
    },
    days_valid: {
      type: DataTypes.INTEGER,
      allowNull: true,
      validate: {
        min: {
          args: [1],
          msg: 'Dias válidos deve ser pelo menos 1',
        },
      },
    },
    coupon_validity_days: {
      type: DataTypes.INTEGER,
      allowNull: true,
      comment: 'How many days the coupon generated by this reward is valid for.',
    },
    auto_apply: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    requires_approval: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    is_active: {
      type: DataTypes.BOOLEAN,
      defaultValue: true,
    },
    is_featured: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    image: {
      type: DataTypes.STRING(500),
      allowNull: true,
    },
    terms_conditions: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    trigger_conditions: {
      type: DataTypes.JSONB,
      allowNull: true,
      defaultValue: {
        min_rating: null,
        feedback_type: null,
        visit_count: null,
        total_spent: null,
        customer_segment: null,
        special_occasions: [],
      },
    },
    notification_settings: {
      type: DataTypes.JSONB,
      allowNull: true,
      defaultValue: {
        send_email: true,
        send_whatsapp: false,
        send_push: false,
        custom_message: '',
      },
    },
    analytics: {
      type: DataTypes.JSONB,
      allowNull: true,
      defaultValue: {
        total_generated: 0,
        total_redeemed: 0,
        redemption_rate: 0,
        average_order_value: 0,
        customer_satisfaction: 0,
      },
    },
    restaurant_id: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: 'restaurants',
        key: 'id',
      },
    },
    customer_id: {
      type: DataTypes.UUID,
      allowNull: true,
      references: {
        model: 'customers',
        key: 'id',
      },
    },
    created_by: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: 'users',
        key: 'id',
      },
    },
  }, {
    sequelize,
    modelName: 'Reward',
    tableName: 'rewards',
    underscored: true,
    timestamps: true,
    indexes: [
      {
        fields: ['restaurant_id'],
      },
      {
        fields: ['customer_id'],
      },
      {
        fields: ['reward_type'],
      },
      {
        fields: ['is_active'],
      },
      {
        fields: ['valid_from', 'valid_until'],
      },
      {
        fields: ['points_required'],
      },
      {
        fields: ['is_featured'],
      },
    ],
    hooks: {
      beforeSave: (reward) => {
        rewardsService.handleRewardBeforeSave(reward);
      },
      beforeCreate: (reward) => {
        rewardsService.handleRewardBeforeCreate(reward);
      },
      beforeUpdate: (reward) => {
        rewardsService.handleRewardBeforeUpdate(reward);
      },
    },
  });

  return Reward;
};