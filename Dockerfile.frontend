# Dockerfile.frontend

# Estágio de build
FROM node:18-alpine AS builder

WORKDIR /app/frontend

# Adiciona ferramentas necessárias para compilar dependências nativas
RUN apk add --no-cache python3 make g++ libc6-compat

# Copia os arquivos de dependência
COPY frontend/package*.json ./

# Instala as dependências
RUN npm cache clean --force && npm install

# Copia o restante do código-fonte do frontend
COPY frontend/src ./src
COPY frontend/public ./public

# Gera o build de produção do React
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=$REACT_APP_API_URL
RUN set -x && npm run build && ls -la /app/frontend/build

# --- NEW DIAGNOSTIC STEP ---
RUN cp /app/frontend/build/service-worker.js /tmp/service-worker.js || echo "service-worker.js not found in build directory"
RUN ls -la /tmp/service-worker.js || echo "service-worker.js not copied to /tmp"
# --- END NEW DIAGNOSTIC STEP ---

# Estágio final para servir os arquivos com NGINX
FROM nginx:alpine

# Copia os arquivos do build para o NGINX
COPY --from=builder /app/frontend/build /usr/share/nginx/html
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
